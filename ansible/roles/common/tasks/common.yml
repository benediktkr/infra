---
- name: set hostname
  hostname:
    name: "{{ item }}"
    use: systemd
  with_items:
    - "{{ inventory_hostname }}"
  tags:
    - hostname

- name: Set timezone to Europe/Berlin
  timezone:
    name: Europe/Berlin
  tags:
    - timezone

- name: update apt chache
  apt:
    update_cache: yes
  changed_when: False
  tags:
    - packages

- name: install python 3.8 on ubuntu
  apt:
    name:
      - python3.8
      - python3-pip
      - python3-apt
      - python3-setuptools
      - python-setuptools
  tags: packages
  when: ansible_distribution == "Ubuntu"

- name: correct python3 version selected on ubuntu
  alternatives:
    name: python3
    path: /usr/bin/python3.8
    link: /usr/bin/python3
  tags:
    - packages
    - alternatives
  when: ansible_distribution == "Ubuntu"

- name: install python3 (3.7 currently) on debian
  apt:
    name:
      - python3
      - python3-pip
  tags: packages
  when: ansible_lsb.id == "Raspbian" or ansible_lsb.id == "Debian"

- name: install packages
  apt:
    state: latest
    name:
      - apt-transport-https
      - aptitude
      - at
      - build-essential
      - ca-certificates
      - cbm
      - cryptsetup
      - curl
      - dnsutils
      - git
      - gnupg2
      - htop
      - iotop
      - iptraf
      - jq
      - libffi-dev
      - libssl-dev
      - lsof
      - lvm2
      - molly-guard
      - mtr
      - ncdu
      - nethogs
      - nmap
      - ntp
      - openssh-server
      - openssl
      - python-dev
      - python-netaddr
      - rsync
      - smartmontools
      - sudo
      - tmux
      - vnstat
      - whois
      - zsh
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  tags:
    - packages
    - ntp

- name: remove packages
  apt:
    name:
      - update-motd
      - landscape-client
      - landscape-common
    state: absent
  tags: packages

- name: remove stupid default users
  user:
    name: "{{ item }}"
    state: absent
  with_items:
    - pi
    - ec2user
    - ubuntu
  tags:
    - users


- name: create my group
  group:
    name: "{{ myusername }}"
  tags:
    - users

- name: create my user
  user:
    name: "{{ myusername }}"
    group: "{{ myusername }}"
    groups:
      - sudo
    shell: /bin/zsh
    append: yes
  tags:
    - users

- name: move homedir for my user if non-standard location
  user:
    name: "{{ myusername }}"
    move_home: yes
    home: "{{ myhomedir }}"
  when: myhomedir is defined
  tags:
    - users

- name: set root shell to zsh
  user:
    name: root
    shell: /bin/zsh

- name: set authorized_keys for user
  authorized_key:
    user: "{{ myusername }}"
    state: present
    key: "{{ lookup('file', item + '.pub') }}"
    manage_dir: yes
  with_items:
    - mathom
    - ber-bkristinsson
  tags:
    - ssh

- name: set authorized_keys for backup user
  authorized_key:
    user: root
    state: present
    key: "{{ lookup('file', 'endor.pub') }}"
    manage_dir: yes
  tags:
    - ssh


- name: allow 'sudo' group to have passwordless sudo
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^%sudo'
    line: '%sudo ALL=(ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'
  when: is_local is not defined
  tags:
    - users

- name: disable password authentication
  replace:
    path: /etc/ssh/sshd_config
    regexp: '^#?PasswordAuthentication(?: yes| no)$'
    replace: 'PasswordAuthentication no'
  tags:
    - ssh
  notify:
    - reload sshd

- name: disable challengeresponse authentication
  replace:
    path: /etc/ssh/sshd_config
    regexp: '^#?ChallengeResponseAuthentication(?: yes| no)$'
    replace: 'ChallengeResponseAuthentication no'
  tags:
    - ssh
  notify:
    - reload sshd

- name: empty /etc/motd
  copy:
    content: ""
    dest: /etc/motd
    force: yes

- name: disable update-motd on ubuntu
  file:
    dest: /etc/update-motd.d/
    mode: 0600
    recurse: yes
  when: ansible_distribution == "Ubuntu"

- name: install unattended-upgrades
  apt:
    name: unattended-upgrades
    state: present
    update_cache: yes
  when: unatt_enabled|bool
  tags:
    - unatt
    - packages

- name: install pip packages
  pip:
    name:
      - ansible
      - poetry
      - zmq
    executable: pip3
  tags:
    - pip
    - packages

# TODO: Decide on which way...
- name: enable unattended-upgrades (following codenames)
  template:
    src: "{{ item }}.j2"
    dest: "/etc/apt/apt.conf.d/{{ item }}"
  with_items:
    - 50unattended-upgrades
    - 20auto-upgrades
  when: unatt_enabled|bool
  tags:
    - unatt


- name: install extra users if there are any
  user:
    name: "{{ item['username'] }}"
    groups: "{{ item['groups'] | default([]) }}"
    shell: "{{ item['shell'] | default('/dev/null') }}"
    append: yes
  with_items: "{{ extra_users }}"
  tags:
    - extrausers
    - users
