script:
  uher_akustomat_f411_short_blink:
    alias: uher_akustomat_f411_short_blink
    mode: single
    icon: mdi:led-on
    sequence:
      - service: light.turn_on
        data:
          effect: pulse_fast
        target:
          entity_id: light.uher_akustomat_f411_indicator_s
      - delay:
          milliseconds: 500
      - service: light.turn_off
        target:
          entity_id: light.uher_akustomat_f411_indicator_s


automation:
  - alias: owntone_uher_akustomat_f411_in_sync
    description: ""
    mode: single
    trigger:
      - platform: state
        entity_id:
          - binary_sensor.owntone_uher_akustomat_f411_volume_synced
        from: "off"
        to: "on"
    condition: []
    action:
      - service: script.uher_akustomat_f411_short_blink

  - alias: owntone_uher_akustomat_volume
    id: owntone_uher_akustomat_volume
    description: "UHER Akustomat F411"
    mode: restart
    max: 40
    trigger:
      #- platform: numeric_state
      #  entity_id:
      #    - sensor.uher_akustomat_f411_volume
      #  above: 0
      #  below: 100
      - platform: state
        entity_id:
          - sensor.uher_akustomat_f411_volume
        from: null
        to: null
    condition:
      condition:
        - condition: template
          alias: "volue states and attrs are valid and available"
          value_template: |-
            {{
            is_number(state_attr("media_player.owntone_server", "volume_level"))
            and is_number(states("sensor.uher_akustomat_f411_volume"))
            }}
        - condition: template
          alias: "to_state.state is within bounds"
          value_template: |-
            {{
            is_number(trigger.to_state.state)
            and (
              trigger.to_state.state|int <= 100
              and trigger.to_state.state|int >= 0
            )
            }}
        - condition: template
          alias: "akustomat and owntone are in sync with each other"
          enabled: false
          value_template: |-
            {% set trigger_state = trigger.to_state.state|float / 100.0 %}
            {% set owntone = state_attr("media_player.owntone_server", "volume_level") | float %}
            {% set diff = trigger_state - owntone %}
            {{ diff | abs < 0.1 }}
    action:
      - service: media_player.volume_set
        data:
          volume_level: |-
            {%- set akustomat = states("sensor.uher_akustomat_f411_volume")|float / 100.0 -%}
            {{ akustomat | round(2) }}
        target:
          entity_id: media_player.owntone_server



media_player:
  #- platform: universal
  #  name: owntone_bedroom
  #  children:
  #    - media_player.owntone_output_bedroom
  #    - media_player.owntone_server

  - platform: universal
    name: bedroom
    children:
      - media_player.owntone_server
      - media_player.sonos_bedroom
      #- media_player.owntone_output_bedroom
    browse_media_entity: media_player.owntone_server
    device_class: speaker
    state_template: >-
      {% if is_state("media_player.owntone_output_bedroom", "on") %}
      {{ states("media_player.owntone_server") }}
      {% else %}
      {{ states("media_player.sonos_bedroom") }}
      {% endif %}
    commands:
      volume_set:
        service: media_player.volume_set
        data:
          volume_level: "{{ volume_level }}"
        target:
          entity_id: >-
            {%- if is_state("media_player.owntone_output_bedroom", "on") -%}
            media_player.owntone_output_bedroom
            {%- else -%}
            media_player.sonos_bedroom
            {% endif %}
      media_play:
        service: media_player.media_play
        data: {}
        target:
          entity_id: >-
            {%- if is_state("media_player.owntone_output_bedroom", "on") -%}
            media_player.owntone_server
            {%- else -%}
            media_player.sonos_bedroom
            {% endif %}
      media_pause:
        service: media_player.media_pause
        data: {}
        target:
          entity_id: >-
            {%- if is_state("media_player.owntone_output_bedroom", "on") -%}
            media_player.owntone_server
            {%- else -%}
            media_player.sonos_bedroom
            {% endif %}
      volume_mute:
       service: media_player.volume_mute
       data:
         is_volume_muted: >-
           {{ is_volume_muted }}
       target:
         entity_id: media_player.sonos_bedroom
    attributes:
      volume_level: media_player.sonos_bedroom|volume_level
      is_volume_muted: media_player.sonos_bedroom|is_volume_muted
      source_list: media_player.owntone_server|source_list


template:
  - sensor:
      - name: owntone_queue_position
        state_class: measurement
        icon: >-
          {% if is_state("binary_sensor.owntone_playing", "on") %}
          mdi:play
          {% else %}
          mdi:stop
          {% endif %}
        availability: >-
          {{
          states("media_player.owntone_server") is defined
          and has_value("media_player.owntone_server")
          and state_attr("media_player.owntone_server", "media_track") is defined
          and is_number(state_attr("media_player.owntone_server", "media_track"))
          }}
        state: >-
          {% set mediatrack = state_attr("media_player.owntone_server", "media_track") %}
          {{ mediatrack | int }}
        attributes:
          source_entity_id: "media_player.owntone_server"
          templated: true
          package: "audio"


  - binary_sensor:
      - name: owntone_playing
        icon: >-
          {% if is_state(this.entity_id, "on") %}
          mdi:play
          {% else %}
          mdi:stop
          {% endif %}
        device_class: running
        delay_off: "00:00:05"
        availability: >-
          {{
          states("media_player.owntone_server") is defined
          and has_value("media_player.owntone_server")
          }}
        state: >-
          {{ is_state("media_player.owntone_server", "playing") }}
        attributes:
          source_entity_id: "media_player.owntone_server"
          templated: true
          package: "audio"

      - name: owntone_playing_podcast
        icon: "mdi:podcast"
        device_class: running
        delay_off: "00:00:05"
        availability: >-
          {{
          states("binary_sensor.owntone_playing") is defined
          and has_value("binary_sensor.owntone_playing")
          and state_attr("media_player.owntone_server", "media_content_type") is defined
          }}
        state: >-
          {% set playing = states("binary_sensor.owntone_playing", "on") or false %}
          {% set is_podcast = is_state_attr(this.entity_id, "podcast_in_queue", true) %}
          {{
          playing|bool == true
          and is_podcast|bool == true
          }}
        attributes:
          source_entity_id: "media_player.owntone_server"
          templated: true
          package: "audio"
          podcast_in_queue: >-
            {{ is_state_attr("media_player.owntone_server", "media_content_type", "podcast") | bool }}
          podcast: >-
            {% if is_state_attr(this.entity_id, "podcast_in_queue", true) %}
            {{ state_attr("media_player.owntone_server", "media_album_name") }}
            {% else %}None{% endif %}
          episode: >-
            {% if is_state_attr(this.entity_id, "podcast_in_queue", true) %}
            {{ state_attr("media_player.owntone_server", "media_title") }}
            {% else %}None{% endif %}
          published_by: >-
            {% if is_state_attr(this.entity_id, "podcast_in_queue", true) %}
            {{ state_attr("media_player.owntone_server", "media_artist") }}
            {% else %}None{% endif %}

      - name: owntone_uher_akustomat_f411_volume_synced
        icon: >-
          {% if is_state(this.entity_id, "on") %}
          mdi:volume-equal
          {% else %}
          mdi:volume-variant-off
          {% endif %}
        availability: >-
          {{
          is_number(state_attr("media_player.owntone_server", "volume_level"))
          and is_number(states("sensor.uher_akustomat_f411_volume"))
          }}
        state: >-
          {% set akustomat = states("sensor.uher_akustomat_f411_volume")|float / 100.0 %}
          {% set owntone = state_attr("media_player.owntone_server", "volume_level") | float %}
          {% set diff = akustomat - owntone %}
          {{ diff | abs < 0.1 }}


homeassistant:
  customize:
    media_player.owntone_output_living_room:
      icon: "mdi:sofa"
      friendly_name: "Livingroom (OwnTone output)"
    media_player.owntone_output_bedroom:
      icon: "mdi:bed-empty"
      friendly_name: "Bedroom (OwnTone output)"
    media_player.owntone_output_study:
      friendly_name: "Study (OwnTone output)"
      icon: "mdi:chair-rolling"
    media_player.owntone_output_hallway:
      friendly_name: "Hallway (OwnTone output)"
      icon: "mdi:speaker"
    media_player.owntone_output_kitchen:
      friendly_name: "Kitchen (OwnTone output)"
      icon: "mdi:stove"
    media_player.owntone_output_fifo:
      friendly_name: "OwnTone FIFO output"
      icon: "mdi:file-music"
    #media_player.owntone_output_apple_tv:
    #  friendly_name: "Apple TV (OwnTone output)"
    #  icon: "mdi:apple"

    media_player.bedroom:
      friendly_name: Bedroom
      templated: true
      package: "audio"
      media_players:
        - media_player.owntone_server
        - media_player.owntone_output_bedroom
        - media_player.sonos_bedroom

    # media_player.sonos_bedroom:
    #   entity_picture: /entity_pictures/sonos-dark.png
    # media_player.hallway:
    #   entity_picture: /entity_pictures/sonos-dark.png
    # media_player.kitchen:
    #   entity_picture: /entity_pictures/sonos-dark.png
    # media_player.living_room:
    #   entity_picture: /entity_pictures/sonos-dark.png
    # media_player.study:
    #   entity_picture: /entity_pictures/sonos-dark.png

    sensor.owntone_queue_position:
      friendly_name: "OwnTone: current queue position"
    binary_sensor.owntone_playing:
      friendly_name: "OwnTone playing"
    binary_sensor.owntone_playing_podcast:
      friendly_name: "OwnTone playing a podcast"
    binary_sensor.owntone_uher_akustomat_f411_volume_synced:
      friendly_name: "UHER Akustomat F411 dial in sync with OwnTone volume"
      package: "audio"
      templated: true
