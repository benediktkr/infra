---

template:

  # permiter experiments (appdaemon is better for this)

  - trigger:
      - platform: state
        entity_id:
          - binary_sensor.motion_bedroom_south
          - binary_sensor.door_bedroom
          #- light.bedroom_ceiling
          #- binary_sensor.motion_hallway_east
          #- binary_sensor.motion_hallway
    binary_sensor:
      - name: perimeter_bedroom_entered
        icon: >-
          {% if is_state(this.entity_id, 'on') %}
          mdi:dots-grid
          {% else %}
          mdi:dots-square
          {% endif %}
        device_class: occupancy
        delay_off: "00:00:15"
        state: >-
          {# set entity_domain = trigger.entity_id.split('.') | list | first #}
          {# set human_action = trigger.to_state.context.user_id is none #}
          {# set light_switch_on = human_action|bool and entity_domain == "light" #}
          {{
          is_state('binary_sensor.motion_hallway_east', 'on')
          and trigger.to_state.state in ['on', 'off']
          }}

  - trigger:
      - platform: state
        entity_id:
          - binary_sensor.motion_hallway_east
          - binary_sensor.door_bedroom
    binary_sensor:
      - name: perimeter_bedroom_exited
        icon: >-
          {% if is_state(this.entity_id, 'on') %}
          mdi:dots-grid
          {% else %}
          mdi:dots-square
          {% endif %}
        device_class: occupancy
        delay_off: "00:00:15"
        state: >-
          {{
          is_state('binary_sensor.motion_bedroom_south', 'on')
          and trigger.to_state.state in ['on', 'off']
          }}

  - trigger:
      - platform: state
        entity_id:
          - binary_sensor.motion_bed_left
          - script.trigger_occupancy_bed_sensors
        from: "off"
        to: "on"
    binary_sensor:
      - name: occupancy_bed_left
        icon: >-
          {% if is_state(this.entity_id, 'on') %}
          mdi:bed
          {% else %}
          mdi:bed-empty
          {% endif %}
        device_class: occupancy
        state: >-
          {# states('binary_sensor.motion_hallway_east', 'on') #}
          {{ is_state('binary_sensor.motion_hallway_east', 'on') }}


  - trigger:
      - platform: state
        entity_id:
          - binary_sensor.motion_bed_right
          - script.trigger_occupancy_bed_sensors
        from: "off"
        to: "on"
    binary_sensor:
      - name: occupancy_bed_right
        icon: >-
          {% if is_state(this.entity_id, 'on') %}
          mdi:bed
          {% else %}
          mdi:bed-empty
          {% endif %}
        device_class: occupancy
        state: >-
          {# states('binary_sensor.motion_hallway_east', 'on') #}
          {{ is_state('binary_sensor.motion_hallway_east', 'on') }}


  - binary_sensor:

      # the group 'binary_sensor.occupancy_group_bed' also exists (if a group is
      # needed for expand() etc. mainly using binary_sensor to be able to template
      # the 'icon' attr (not possible in group)
      - name: occupancy_bed
        icon: >-
          {% if is_state(this.entity_id, 'on') %}
          mdi:bed
          {% else %}
          mdi:bed-empty
          {% endif %}
        device_class: occupancy
        state: >-
          {% set left = is_state('binary_sensor.occupancy_bed_left', 'on') %}
          {% set right = is_state('binary_sensor.occupancy_bed_right', 'on') %}
          {{ left|bool or right|bool }}
        attributes:
          last_occupied: >-
            {% if has_value('sensor.hours_since_bed_occupied') %}
            {{ states('sensor.hours_since_bed_occupied') | int }}
            {% endif %}

      # experimenting with expanding on the motion-activated binary_sensor.occupancy_bed_right
      - name: ben_in_bed
        icon: >-
          {% if is_state(this.entity_id, 'on') %}
          mdi:bed
          {% else %}
          mdi:bed-empty
          {% endif %}
        device_class: occupancy
        state: >-
          {% set ben_home = is_state('binary_sensor.home_ben', 'on') %}
          {% set podcast = is_state('owntone_playing_podcast', 'on') %}
          {% set owntone_bedroom = is_state('media_player.owntone_output_bedroom', 'on') %}
          {% set owntone_study = is_state('media_player.owntone_output_study', 'on') %}
          {% set podcast_bed = podcast|bool and owntone_bedroom|bool and not owntone_study %}
          {% set bed_occupancy = is_state('binary_sensor.occupancy_bed', 'on') %}
          {% set monitor_off = is_state('binary_sensor.study_desk_monitor', 'off') %}
          {% set tv_off = is_state('binary_sensor.tv_livingroom', 'off') %}
          {% set amp_off = is_state('switch.nad_c370', 'off') %}
          {% set atv_playing = is_state('binary_sensor.apple_tv_is_playing', 'off') %}
          {% set screens_off = monitor_off|bool and tv_off|bool and amp_off|bool and not atv_playing|bool %}
          {% set bedroom_ceiling_light = is_state('light.bedroom_ceiling', 'on') %}
          {% set phone_charging = is_state('sensor.ben_phone_battery_state', 'Charging') %}
          {% set motion_hallway = is_state('binary_sensor.motion_hallway', 'on') %}
          {% set motion_study = is_state('binary_sensor.motion_study', 'on') %}
          {% set motion_livingroom = is_state('binary_sensor.motion_livingroom', 'on') %}
          {{
          ben_home
          and not bedroom_ceiling_light
          and (
            screens_off
            or phone_charging
          )
          and (
            podcast_bed
            or bed_occupancy
          )
          and (
            not motion_hallway
            and not motion_study
            and not motion_livingroom
          )
          }}

  - sensor:
      - name: hours_since_bed_occupied
        state_class: measurement
        unit_of_measurement: hours
        availability: >-
          {{
          states('automation.trigger_occupancy_bed_off') is defined
          and state_attr('automation.trigger_occupancy_bed_off', 'last_triggered') is not none
          and states('binary_sensor.occupancy_bed') is defined
          }}
        state: >-
          {% set last_triggered = state_attr("automation.trigger_occupancy_bed_off", "last_triggered") %}
          {% set triggered_delta = now() - last_triggered %}
          {% set hours = triggered_delta.seconds / 60 / 60 %}
          {{ hours | round(0) | int }}


  - button:
      name: idle_occupancy_bed
      icon: mdi:bed
      press:
        - service: script.trigger_occupancy_bed_sensors
          data: {}

binary_sensor:
  - platform: group
    name: occupancy_group_bed
    device_class: motion
    all: false
    entities:
      - binary_sensor.occupancy_bed_right
      - binary_sensor.occupancy_bed_right

automation:
  - alias: trigger_occupancy_bed_off
    id: trigger_occupancy_bed_off
    description: "last_triggered used to calculate value for sensor.hours_since_bed_occupied"
    mode: single
    trigger:
      - platform: state
        entity_id:
          - binary_sensor.occupancy_bed
        to: "off"
    condition: []
    action: []

script:
  trigger_occupancy_bed_sensors:
    mode: single
    sequence: []

homeassistant:
  customize:
    # permiter enter/exit box/wasp
    binary_sensor.perimeter_bedroom_entered:
      friendly_name: Bedroom perimeter entered
      templated: true
      package: occupancy
    binary_sensor.perimeter_bedroom_exited:
      friendly_name: Bedroom perimeter exited
      templated: true
      package: occupancy

    # occupancy (bed)
    binary_sensor.occupancy_bed_left:
      friendly_name: Occupancy bed (left side)
      templated: true
      package: occupancy
    binary_sensor.occupancy_bed_right:
      friendly_name: Occupancy bed (right side)
      templated: true
      package: occupancy
    binary_sensor.occupancy_bed:
      friendly_name: Bed occupancy
      templated: true
      package: occupancy
    binary_sensor.ben_in_bed:
      friendly_name: Ben is in bed
      templated: true
      package: occupancy
    sensor.hours_since_bed_occupied:
      friendly_name: Hours since bed was occupied
      templated: true
      package: occupancy

    button.idle_occupancy_bed:
      friendly_name: Idle Bed Occupancy
      templated: true
      package: occupancy

    # groups
    binary_sensor.occupancy_group_bed:
      friendly_name: Bed Occupancy (group)
      group: true
      package: occupancy
