- alias: monitor_radiators_reporting
  description: monitor that the battery-powered radiator knobs are working
  trigger:
    {% for radiator in hass_radiators -%}
    {% if 'status' in radiator -%}
    - platform: state
      id: "radiator {{ radiator.name }}"
      entity_id:
        - binary_sensor.radiator_{{ radiator.name }}_reporting
      to: 'off'
    {% endif -%}
    {% endfor %}

  condition: []
  mode: single
  action:
    - service: notify.persistent_notification
      data:
        title: 'device not reporting'
        message: 'stopped reporting: {%raw%}{{ trigger.id }}{%endraw%}'
    - service: notify.notify
      data:
        title: 'device not reporting'
        message: 'stopped reporting: {%raw%}{{ trigger.id }}{%endraw%}'

- alias: refresh_light_switches_state
  description: the tkbhome switches dont automatically report their state
  trigger:
    - platform: time_pattern
      minutes: "/1"
  condition: []
  mode: single
  action:
    - service: zwave_js.refresh_value
      data:
        entity_id:
          {% for item in hass_light_switches -%}
          {% if item.automation_refresh|default(false) -%}
          - {{ item.entity_id }}
          {% endif -%}
          {% endfor %}

{% for item in hass_light_switches -%}
{% set domain = item.entity_id.split('.')[0] %}
{% set name = item.entity_id.split('.')[1] %}
{% if 'auto_off' in item %}
- alias: {{ name }}_turn_off
  description: automatically turn off {{ name }} {{ domain}}
  trigger:
    - platform: state
      entity_id:
        - {{ item.entity_id }}
      to: "on"
      for:
        minutes: {{ item.auto_off }}
  condition:
    - condition: state
      entity_id: {{ item.entity_id }}
      state: "on"
  action:
    - service: {{ domain }}.turn_off
      data: {}
      target:
        entity_id: {{ item.entity_id }}
  mode: single
{% endif -%}
{% endfor %}

{% for linux_tracker in hass_linux_presence_trackers -%}
- alias: "webhook_presence_trackers_{{ linux_tracker.name }}"
  description: ""
  trigger:
    - platform: webhook
      webhook_id: {{ linux_tracker.name }}-{{ linux_tracker.webhook_key }}
      id: webhook
  mode: single
  action:
    - if:
        - condition: template
          value_template: >-
            {%raw -%} {% {%endraw%} set current_value = states('input_text.webhook_{{ linux_tracker.name }}') {%raw%} %} {%endraw%}
            {% raw %}
            {{ current_value != trigger.json['state'] }}
            {% endraw %}

      then:
        - service: input_text.set_value
          target:
            entity_id: input_text.webhook_{{ linux_tracker.name }}
          data:
            value: "{% raw %}{{ trigger.json.state }}{% endraw %}"

- alias: "inactive_webhook_presence_trackers_{{ linux_tracker.name }}"
  description: ""
  trigger:
    - platform: state
      entity_id: binary_sensor.{{ linux_tracker.name }}_webhook_triggering
      to: "off"
  action:
    - service: input_text.set_value
      target:
        entity_id: input_text.webhook_{{ linux_tracker.name }}
      data:
        value: "inactive"

{% endfor %}

- alias: flood_sensor_washing_machine
  description: ""
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.flood_sensor_water_leak_detected
      to: "on"
  condition: []
  mode: single
  action:
    - service: switch.turn_off
      data: {}
      target:
        entity_id: switch.washing_machine
    - service: notify.notify
      data:
        title: "FLOOD SENSOR BATHROOM"
        message: "WATER DETECTED! power to washing machine was cut"
    - if:
        - condition: zone
          entity_id: person.ben
          zone: zone.home
      then:
        - service: switch.turn_on
          data: {}
          target:
            entity_id: switch.nad_c370
        - service: media_player.play_media
          data:
            media_content_type: video/webm
            media_content_id: media-source://media_source/media/flood_alert.mp3
          target:
            entity_id: media_player.den_tv

- alias: buzzer_normally_closed
  description: "keep the buzzer switch closed"
  mode: single
  trigger:
    - platform: state
      entity_id:
        - switch.doorbell_buzzer
      to: "on"
      for:
        hours: 0
        minutes: 0
        seconds: 1
  condition: []
  action:
    - service: switch.turn_off
      data: {}
      target:
        entity_id: switch.doorbell_buzzer

{% for item in hass_feedreader -%}
- alias: "podcast_parse_feed_{{ item.short_name }}"
  trigger:
    platform: event
    event_type: feedreader
    event_data:
      feed_url: "{{ item.url }}"
  action:
    service: persistent_notification.create
    data:
      title: "Podcast parsed"
      message: {% raw %}"{{ trigger.event.data }}"{% endraw %}

{% endfor %}
