## https://jellyfin.org/docs/general/networking/nginx.html

{# proxy_cache_path  {{ jellyfin_root }}/nginx-cache levels=1:2 keys_zone=cWEB:50m inactive=90d max_size=35000m;
 # map $request_uri $h264Level { ~(h264-level=)(.+?)& $2; }
 # map $request_uri $h264Profile { ~(h264-profile=)(.+?)& $2; } #}

server {
    listen 443 ssl http2;
    {% if inventory_hostname in wg_clients -%}
    listen {{ wg_clients[inventory_hostname].ip }}:443 ssl http2;
    {% endif -%}

    include /etc/nginx/sudo-known.conf;
    include listen-proxy-protocol.conf;
    server_name {{ jellyfin_url }};

    client_max_body_size 20M;

    # use a variable to store the upstream proxy
    # set $jellyfin jellyfin;
    # resolver 127.0.0.1 valid=30;

    # access log is used by python script
    access_log /var/log/nginx/access_{{ jellyfin_url }}.log main;
    error_log /var/log/nginx/error_{{ jellyfin_url }}.log warn;

    ssl_certificate /usr/local/etc/certs/{{ jellyfin_url }}/fullchain.pem;
    ssl_certificate_key /usr/local/etc/certs/{{ jellyfin_url }}/privkey.pem;

    #ssl_stapling on;
    #ssl_stapling_verify on;

    #client_body_buffer_size 1024m;
    #proxy_max_temp_file_size 0;


    # Security / XSS Mitigation Headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;

    # Content Security Policy
    # See: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
    # External Javascript (such as cast_sender.js for Chromecast) must
    # be allowlisted.
    # 'self' https://*.{{ domain }} https://{{ domain }}
    add_header Content-Security-Policy "default-src https: data: blob: http://image.tmdb.org; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' https://www.gstatic.com/cv/js/sender/v1/cast_sender.js https://www.gstatic.com/eureka/clank/cast_sender.js https://www.gstatic.com/eureka/clank/94/cast_sender.js https://www.gstatic.com/eureka/clank/95/cast_sender.js https://www.gstatic.com/eureka/clank/96/cast_sender.js https://www.gstatic.com/eureka/clank/97/cast_sender.js https://www.gstatic.com/eureka/clank/105/cast_sender.js https://www.gstatic.com/eureka/clank/106/cast_sender.js https://www.youtube.com blob:; worker-src 'self' blob:; connect-src 'self'; object-src 'none'; frame-ancestors 'self'" always;

    # kill cache
    add_header Last-Modified $date_gmt always;
    #add_header Cache-Control 'no-store, no-cache' always;
    add_header Cache-Control 'no-store' always;
    if_modified_since off;
    expires off;
    etag off;

    # attempting to fix the title with nginx
    {% set jellyfin_title = jellyfin_url.split(".")[0].capitalize() %}
    #sub_filter '<title>Jellyfin</title>' '<title>{{ jellyfin_title }}</title>';
    #sub_filter 'document.title="Jellyfin"' 'document.title="{{ jellyfin_title }}"';
    #sub_filter 'document.title=e||"Jellyfin"' 'document.title=e||"{{ jellyfin_title }}"';
    #sub_filter 'document.title=B.ZP.translateHtml(document.title,"core")' 'document.title="{{ jellyfin_title }}"';
    ## in addition to “text/html”.
    #sub_filter_types application/javascript;
    #sub_filter_last_modified on;
    #sub_filter_once off;

    location = / {
        return 302 https://$host/web/;
    }

    # jellyfin-web already has a robots.txt file that disallows everything, but we still want to maintain our own.
    # jellyfin (not -web) will issue a 302 redirect from {{ jellyfin_url }}/robots.txt to {{ jellyfin_url }}/web/robots.txt
    # where the file is then served from.
    #
    # https://github.com/jellyfin/jellyfin-web/blob/master/src/robots.txt
    location = /robots.txt {
        alias {{ systemuserlist.jellyfin.home }}/robots.txt;
    }
    location / {
        #include /etc/nginx/jellyfin/jellyfin_auth.conf;

        proxy_pass http://127.0.0.1:{{ jellyfin_port }};
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;

        # Disable buffering when the nginx proxy gets very resource
        # heavy upon streaming
        #proxy_buffering off;
    }

    location /metrics {
        return 403;
    }

    # so /web/#!/ works instead of having to go to /web/index.html/#!/
    location = /web/ {
        proxy_pass http://127.0.0.1:{{ jellyfin_port }}/web/index.html;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
    }

    location /socket {
        proxy_pass http://127.0.0.1:{{ jellyfin_port }};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
    }

    {% for item in ["/health", "/GetUtcTime"] -%}
    location {{ item }} {
        allow 127.0.0.1;
        allow {{ my_public_ips[inventory_hostname] }}/32;
        allow {{ my_public_ips[ansible_control_host] }}/32;
        allow {{ wireguard_cidr }};
        deny all;

        proxy_pass http://127.0.0.1:{{ jellyfin_port }};
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    {% endfor %}
    location = /_health {
        proxy_pass http://127.0.0.1:{{ jellyfin_port }}/health;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        {# hide_header 'content-security-policy';
         # hide_header 'x-response-time-ms';
         # hide_header 'x-frame-options';
         # hide_header 'x-xss-protection';
         # hide_header 'last-modified'; #}
    }


    {# location /videos/ {
     #     # cache video streams: https://jellyfin.org/docs/general/networking/nginx.html#cache-video-streams
     #     proxy_cache cWEB;
     #     proxy_cache_valid 200 301 302 30d;
     #     proxy_ignore_headers Expires Cache-Control Set-Cookie X-Accel-Expires;
     #     proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
     #     proxy_connect_timeout 10s;
     #     proxy_http_version 1.1;
     #     #proxy_set_header Connection "";
     #
     #     proxy_pass http://localhost:{{ jellyfin_port }};
     #     proxy_cache_key "{{ jellyfin_url }}$uri?MediaSourceId=$arg_MediaSourceId&VideoCodec=$arg_VideoCodec&AudioCodec=$arg_AudioCodec&AudioStreamIndex=$arg_AudioStreamIndex&VideoBitrate=$arg_VideoBitrate&AudioBitrate=$arg_AudioBitrate&SubtitleMethod=$arg_SubtitleMethod&TranscodingMaxAudioChannels=$arg_TranscodingMaxAudioChannels&RequireAvc=$arg_RequireAvc&SegmentContainer=$arg_SegmentContainer&MinSegments=$arg_MinSegments&BreakOnNonKeyFrames=$arg_BreakOnNonKeyFrames&h264-profile=$h264Profile&h264-level=$h264Level";
     #     proxy_cache_valid 200 301 302 30d;
     # } #}

}

server {
   listen 80;
   server_name {{ jellyfin_url }};
   return 301 https://$host$request_uri;
}
