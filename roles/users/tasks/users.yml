---

- name: set groups
  block:
    - set_fact:
        human_users: "{{ default_users + extra_users }}"
        system_users: "{{ default_system_users + system_users }}"
      tags:
        - systemusers
        - humanusers
        - sshkeys

    - name: list human users
      debug:
        var: human_users

    - name: sanity check
      fail:
        msg: 'my user is missing'
      when: myusername not in human_users
  tags:
    - systemusers
    - humanusers
    - users
    - sshkeys

- name: add .ssh dir to /etc/skel
  file:
    state: directory
    path: /etc/skel/.ssh
    mode: 0700
    owner: root
    group: root
  tags:
    - skel

- name: set root shell to bash
  user:
    name: root
    shell: /bin/bash
  tags:
    - rootbash

- name: set authorized_keys for root
  template:
    src: "private/sshkeys/root.authorized_keys"
    dest: "~/.ssh/authorized_keys"
    owner: root
    group: root
    mode: 0600
  tags:
    - sshkeys

- name: remove stupid default users
  user:
    name: "{{ item }}"
    state: absent
    force: yes
  with_items:
    - pi
    - ec2user
    - ubuntu
    - opc
  tags: defaultusers
  when:
    - not keep_default_users|default(False)|bool

- name: remove lingering /home dirs for stupid default users
  file:
    state: absent
    path: "/home/{{ item }}"
  with_items:
    - pi
    - ec2user
    - ubuntu
    - opc

- name: create user groups
  group:
    name: "{{ userlist[item]['username'] }}"
    gid: "{{ userlist[item]['gid'] | default(userlist[item]['uid']) }}"
  with_items: "{{ human_users }}"
  tags: human

- name: create common groups
  group:
    name: "{{ item.key }}"
    gid: "{{ item.value.gid }}"
  with_dict: "{{ grouplist | default({}) }}"
  loop_control:
    label: "{{ item.key }}"
  tags: groups


- name: set up system users
  block:

    - name: create system user groups
      group:
        state: present
        name: "{{ item.key }}"
        gid: "{{ item.value.gid | default(item.value.uid) }}"
      with_dict: "{{ systemuserlist }}"
      loop_control:
        label: "{{ item.key }}"

    - name: create system users
      user:
        state: present
        name: "{{ item.key }}"
        group: "{{ item.key }}"
        groups: "{{ item.value.groups | default([]) }}"
        shell: "{{ item.value.shell | default('/dev/null') }}"
        uid: "{{ item.value.uid }}"
        create_home: "{{ 'home' in item.value | default(False) }}"
        home: "{{ item.value.home | default('/var/lib/' + item.key) }}"
        move_home: yes
        append: yes
        system: yes
        force: no
      loop_control:
        label: "{{ item.key }}"
      with_dict: "{{ systemuserlist }}"

    - name: set authorized_keys for tunnel user
      template:
        src: private/sshkeys/tunnel.authorized_keys
        dest: /home/.system/tunnel/.ssh/authorized_keys
        owner: tunnel
        group: tunnel
        mode: 0700
      tags:
        - sshkeys

    - name: set authorized_keys for jenkins user if jenkins server
      template:
        src: private/sshkeys/jenkins.authorized_keys
        dest: "{{ systemuserlist.jenkins.home }}/.ssh/authorized_keys"
        owner: jenkins
        group: jenkins
        mode: 0700
      tags:
        - sshkeys

- name: create human users
  user:
    name: "{{ userlist[item]['username'] }}"
    group: "{{ userlist[item]['username'] }}"
    groups: "{{ userlist[item]['groups'] | default([]) }}"
    shell: "{{ userlist[item]['shell'] | default('/bin/zsh') }}"
    uid: "{{ userlist[item]['uid'] }}"
    append: yes
  with_items: "{{ human_users }}"
  tags: human

- name: chmod and chown for .ssh
  file:
    path: "~{{ item }}/.ssh"
    state: directory
    owner: "{{ item }}"
    group: "{{ item }}"
    mode: 0700
  with_items: "{{ human_users }}"
  tags: human

- name: allow 'sudo' group to have passwordless sudo
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^%sudo'
    line: '%sudo ALL=(ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'
  when: is_local is not defined

- name: set authorized_keys for users with local pubkey files
  template:
    src: "private/sshkeys/{{ item }}.authorized_keys"
    dest: "~/.ssh/authorized_keys"
    owner: "{{ item }}"
    group: "{{ item }}"
    mode: 0600
  become: true
  become_user: "{{ item }}"
  with_items: "{{ human_users }}"
  when:
    - userlist[item]['sshkey']
  tags:
    - sshkeys

- name: set a password for {{ myusername }} and root
  user:
    name: "{{ item }}"
    password: "{{ mypassword }}"
    update_password: always
  tags:
    - human
    - mypass
  with_items:
    - "{{ myusername }}"
    - root


- name: set up deadspace
  block:
    - name: create deadspace for users
      file:
        state: directory
        path: "/deadspace/users/{{ item }}"
        owner: "{{ userlist[item]['username'] }}"
        group: "{{ userlist[item]['username'] }}"
        mode: 0700
      with_items: "{{ human_users }}"

    - name: symlink deadspace
      file:
        src: "/deadspace/users/{{ item }}"
        dest: "/home/{{ item }}/deadspace"
        owner: "{{ userlist[item]['username'] }}"
        group: "{{ userlist[item]['username'] }}"
        state: link
      with_items: "{{ human_users }}"

  when: "'mainframe' in group_names"
