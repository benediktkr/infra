server {
   listen 80;
   server_name {{ inventory_hostname }};

   return 301 https://$host$request_uri;
}

{# {% if 'matrix' in group_names %}
 # server {
 #    listen 8448;
 #    server_name {{ inventory_hostname }};
 #
 #    return 301 https://{{ matrix_url }}:8448$request_uri;
 # }
 #
 # {% endif %} #}

server {
  listen 443 ssl;

  listen   [::]:443 ssl; # listen for ipv6

  root /var/www/html;
  server_name {{ inventory_hostname }};
  include /etc/nginx/authelia_internal.conf;

  location = /server_status {
    stub_status;

    access_log off;

    allow 127.0.0.1;
    {% if 'address' in ansible_default_ipv4 -%}
    allow {{ ansible_default_ipv4.address }};
    {% endif -%}
    {% if ansible_default_ipv6 is defined and 'address' in ansible_default_ipv6 -%}
    allow {{ ansible_default_ipv6.address }};
    {% endif -%}
    allow {{ bridgewithdns_cidr }};
    deny all;
  }


  {% for item in nginx_redirect|default([]) %}
  location = {{ item.src }} {
    return 301 https://$host{{ item.dest }};
  }
  {% endfor %}

  {% for item in nginx_subdirs %}
  location ^~ /{{ item.dir }}/ {
    {% if item.require_auth | default(False) -%}
    include /etc/nginx/require_auth_proxy.conf;
    {% endif %}

    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    proxy_pass {{ item.proxy_pass }};
    rewrite /{{ item.dir }}(.*) $1 break;

  }
  {% endfor %}

  {% if nginx_default_site_autoindex|default(False) -%}
  autoindex on;
  autoindex_exact_size off;
  {% endif -%}

  access_log /var/log/nginx/access.log main;
  error_log /var/log/nginx/error.log warn;

  ssl_session_timeout 5m;

  ssl_certificate /etc/letsencrypt/live/{{ inventory_hostname.split('.')[1:] | join(".")  }}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/{{ inventory_hostname.split('.')[1:] | join(".")  }}/privkey.pem;

  add_header Referrer-Policy "no-referrer" always;
  add_header X-Content-Type-Options "nosniff" always;
  add_header X-Download-Options "noopen" always;
  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header X-Permitted-Cross-Domain-Policies "none" always;
  add_header X-Robots-Tag "none" always;
  add_header X-XSS-Protection "1; mode=block" always;
}
