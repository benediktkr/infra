---
- name: create dir structure
  file:
    path: "{{ openldap_root }}/{{ item }}"
    state: directory
    mode: 0755
    owner: openldap
    group: openldap
    recurse: no
  with_items:
    - ldap
    - slapd.d
    - certs
    - ldif

- name: start openldap container
  docker_container:
    name: openldap
    hostname: "{{ openldap_url }}"
    #domainname: "{{ openldap_domain }}"
    image: benediktkr/openldap:latest
    auto_remove: no
    detach: yes
    pull: yes
    restart_policy: "no"
    state: started
    container_default_behavior: compatibility
    #user: "{{ openldap_uid }}:{{ openldap_gid }}"
    mounts:
      - type: bind
        source: "{{ openldap_root }}/ldap"
        target: /var/lib/ldap
      - type: bind
        source: "{{ openldap_root }}/slapd.d"
        target: /etc/ldap/slapd.d
      - type: bind
        source: "{{ openldap_root }}/certs"
        target: /container/service/slapd/assets/certs/
      # - type: bind
      #   source: "{{ openldap_root }}/ldif"
      #   target: /container/service/slapd/assets/config/bootstrap/ldif/custom
    ports:
      - 389:389
      - 636:636
    env:
      LDAP_LOG_LEVEL: "256"
      LDAP_ORGANISATION: "{{ openldap_domain }}"
      LDAP_DOMAIN: "{{ openldap_domain }}"
      LDAP_BASE_DN: "{{ openldap_dc }}"
      LDAP_ADMIN_PASSWORD: "{{ openldap_admin_pass }}"
      LDAP_CONFIG_PASSWORD: "{{ openldap_config_pass }}"
      LDAP_READONLY_USER: "true"
      LDAP_READONLY_USER_USERNAME: "readonly"
      LDAP_READONLY_USER_PASSWORD: "readonly"
      LDAP_RFC2307BIS_SCHEMA: "false"
      LDAP_BACKEND: "mdb"
      LDAP_TLS: "true"
      LDAP_TLS_CRT_FILENAME: "ldap.crt"
      LDAP_TLS_KEY_FILENAME: "ldap.key"
      LDAP_TLS_DH_PARAM_FILENAME: "dhparam.pem"
      LDAP_TLS_CA_CRT_FILENAME: "ca.crt"
      LDAP_TLS_ENFORCE: "false"
      LDAP_TLS_CIPHER_SUITE: "SECURE256:-VERS-SSL3.0"
      LDAP_TLS_VERIFY_CLIENT: "try"
      LDAP_REPLICATION: "false"
      KEEP_EXISTING_CONFIG: "false"
      LDAP_REMOVE_CONFIG_AFTER_SETUP: "true"
      LDAP_SSL_HELPER_PREFIX: "ldap"
    networks_cli_compatible: no
    networks:
      - name: bridgewithdns
        ipv4_address: "{{ bridgewithdns.openldap }}"
    # labels:
    #   dockerlogs_format: "json"
  tags:
    - docker-containers
    - openldap-container

- name: start phpldapadmin container
  docker_container:
    name: phpldapadmin
    image: osixia/phpldapadmin:latest
    auto_remove: yes
    detach: yes
    pull: yes
    restart_policy: "no"
    state: started
    container_default_behavior: compatibility
    env:
      PHPLDAPADMIN_LDAP_HOSTS: "openldap"
      PHPLDAPADMIN_HTTPS: "false"
    networks_cli_compatible: no
    networks:
      - name: bridgewithdns
        ipv4_address: "{{ bridgewithdns.ldapadmin }}"

# https://tylersguides.com/guides/openldap-how-to-add-a-user/
- name: apt packages that python-ldap depends on
  apt:
    name:
      - libldap2-dev
      - libsasl2-dev
      - slapd
      - ldap-utils
      - tox
      - lcov
      - valgrind
    update_cache: yes
    state: latest

- name: pip module for ldap tasks
  pip:
    name: python-ldap
    state: latest
    executable: pip3
  tags:
    - pip
    - packages

- name: create ou's
  community.general.ldap_entry:
    dn: "ou={{ item }},{{ openldap_dc }}"
    objectClass:
      - organizationalUnit
    server_uri: ldap://{{ openldap_url }}/
    bind_dn: cn=admin,{{ openldap_dc }}
    bind_pw: "{{ openldap_admin_pass }}"
  tags:
    - ldap-users
    - ldap-groups
  with_items:
    - people
    - services
    - hosts

- name: remove disabled users
  community.general.ldap_entry:
    dn: "uid={{ item.username }},ou=people,{{ openldap_dc }}"
    state: absent
    server_uri: ldap://{{ openldap_url }}/
    bind_dn: cn=admin,{{ openldap_dc }}
    bind_pw: "{{ openldap_admin_pass }}"
  loop_control:
    label: "{{ item.username }}"
  with_items: "{{ userlist.values()|selectattr('enabled', 'false') }}"
  tags:
    - ldap-users

- name: add people
  community.general.ldap_entry:
    dn: "uid={{ item.username }},ou=people,{{ openldap_dc }}"
    objectClass:
      - posixAccount
      - inetOrgPerson
    state: present
    attributes:
      description: "user for {{ item.username }}"
      sn: "{{ item.username }}"
      cn: "{{ item.username }}"
      uidNumber: "{{ item.uid }}"
      gidNumber: "{{ item.gid|default(item.uid) }}"
      homeDirectory: "{{ item.home|default('/home/'+item.username) }}"
    server_uri: ldap://{{ openldap_url }}/
    bind_dn: cn=admin,{{ openldap_dc }}
    bind_pw: "{{ openldap_admin_pass }}"
  loop_control:
    label: "{{ item.username }}"
  with_items: "{{ userlist.values()|selectattr('enabled', 'true') }}"
  tags:
    - ldap-users

- name: adding attrs for users
  community.general.ldap_attrs:
    dn: "uid={{ item.username }},ou=people,{{ openldap_dc }}"
    attributes:
      userPassword: "{{ item.ldap_password|default('') }}"
      #homeDirectory: "/home/{{ item.username }}"
      # sshPublicKey: schema here: http://pig.made-it.com/ldap-openssh.html
      roomNumber: "{% if item.sshkey %}{{ lookup('file', 'private/sshkeys/' + item.username + '.pub')}}{% else %} {% endif %}"
      loginShell: "{{ item.shell|default('/bin/zsh') }}"
      mail:  "{{ item.email|default('') }}"
    state: exact
    server_uri: ldap://{{ openldap_url }}/
    bind_dn: cn=admin,{{ openldap_dc }}
    bind_pw: "{{ openldap_admin_pass }}"
  with_items: "{{ userlist.values()|selectattr('enabled', 'true') }}"
  loop_control:
    label: "{{ item.username }}"
  tags:
    - ldap-users

- name: service groups
  community.general.ldap_entry:
    dn: "cn={{ item }},ou=services,{{ openldap_dc }}"
    objectClass:
      - groupOfUniqueNames
    state: present
    attributes:
      uniqueMember: "{{ openldap_dc }}"
    server_uri: ldap://{{ openldap_url }}/
    bind_dn: cn=admin,{{ openldap_dc }}
    bind_pw: "{{ openldap_admin_pass }}"
  loop_control:
    label: "{{ item }}"
  with_items: "{{ openldap_groups }}"
  tags:
    - ldap-users
    - ldap-groups

- name: adding users to groups
  community.general.ldap_attrs:
    dn: "cn={{ item[0] }},ou=services,{{ openldap_dc }}"
    attributes:
      uniqueMember: "uid={{ item[1].username }},ou=people,{{ openldap_dc }}"
    state: "{% if item[0] in item[1].ldap_groups|default([]) %}present{%else%}absent{%endif%}"
    server_uri: ldap://{{ openldap_url }}/
    bind_dn: cn=admin,{{ openldap_dc }}
    bind_pw: "{{ openldap_admin_pass }}"
  loop_control:
    label: "{{ item[1].username }}/{{ item[0] }} {% if item[0] in item[1].ldap_groups|default([]) %}present{%else%}absent{%endif%}"
  with_nested:
    - "{{ openldap_groups }}"
    - "{{ userlist.values()|selectattr('enabled', 'true') }}"
  tags:
    - ldap-users
    - ldap-groups
