---

- name: template nginx vhost for {{ pihole_url }}
  template:
    src: pihole-vhost.j2
    dest: /etc/nginx/sites-enabled/01-pihole-vhost
    #validate: /usr/sbin/nginx -t
  tags:
    - nginx-config
    - nginx-vhosts
    - pihole-nginx
  notify: reload nginx

- name: create dir structure
  file:
    path: "{{ pihole_root }}/{{ item['dir'] }}"
    state: directory
    mode: 0775
    owner: "{{ item['owner'] | default('999') }}"
    group: "{{ item['group'] | default('999') }}"
  with_items:
    - { dir: "etc/pihole" }
    - { dir: "etc/dnsmasq.d" }
  tags: docker
  register: piholedocker

- name: template dns overrides
  template:
    src: custom.list.j2
    dest: "{{ pihole_root }}/etc/pihole/custom.list"
    owner: root
    group: root
    mode: 0644
  #notify: restart pihole
  tags:
    - pihole-config
    - pihole-overrides

- name: template dhcp options
  template:
    src: 07-dhcp-options.conf.j2
    dest: "{{ pihole_root }}/etc/dnsmasq.d/07-dhcp-otions.conf"
    owner: root
    group: root
    mode: 0644
  tags:
    - pihole-config
  when: pihole_dhcp
  #notify: restart pihole

- name: disable systemd-resolved
  service:
    name: systemd-resolved
    state: stopped
    enabled: no


- name: enable null blocking
  lineinfile:
    path: "{{ pihole_root}}/etc/pihole/pihole-FTL.conf"
    line: "BLOCKINGMODE=NULL"

# If you get the error about ssl_match_hostname, see the comment in
# the nextcloud role for the docker_container task.
#
#
# TODO: does pihole run with uid 999? then change it, telegraf wants to use that

- name: start docker container
  docker_container:
    name: "pihole"
    image: "pihole/pihole:{{ pihole_version | default('latest') }}"
    auto_remove: no
    detach: yes
    pull: yes
    restart_policy: "unless-stopped"
    state: started
    network_mode: host
    container_default_behavior: compatibility
    capabilities: "{% if pihole_dhcp %}['NET_ADMIN']{%else%}[]{%endif%}"
    env:
      WEB_PORT: "{{ pihole_http_port|string }}"
      DNSMASQ_LISTENING: "local"
      VIRTUAL_HOST: "{{ pihole_url }}"
      # ServerIP: "{{ pihole_local_ip }}" # can disable wg0
      TZ: "Europe/Berlin"
      WEBPASSWORD: "{{ pihole_web_password }}"
      DNS1: "{{ upstream_dns_1 }}"
      DNS2: "{{ upstream_dns_2 }}"
      CONDITIONAL_FORWARDING: "{{ pihole_cond|string }}"
      CONDITIONAL_FORWARDING_IP: "{{ pihole_cond_ip }}"
      CONDITIONAL_FORWARDING_DOMAIN: "{{ pihole_cond_domain }}"
    dns_servers:
      - 127.0.0.1
      - pihole_dns_1
      - pihole_dns_2
    hostname: "{{ inventory_hostname.split('.')[0] }}-pihole"
    # networks_cli_compatible: no
    # networks:
    #   - name: bridgewithdns
    #     ipv4_address: "{{ bridgewithdns.pihole }}"
    volumes:
      - "{{ pihole_root }}/etc/pihole:/etc/pihole"
      - "{{ pihole_root }}/etc/dnsmasq.d:/etc/dnsmasq.d"
  tags:
    - pihole-container
    - docker-containers

- name: wait for port 53
  wait_for:
    port: 53
    host: localhost
    sleep: 4
  tags: pihole-container
