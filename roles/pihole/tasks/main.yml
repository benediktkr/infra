---

- name: include private vars
  include_vars: private/vars.yml
  tags:
    - docker
    - pihole-container

- name: create dir structure
  file:
    path: "{{ pihole_root }}/{{ item['dir'] }}"
    state: directory
    mode: 0775
    owner: "{{ item['owner'] | default('999') }}"
    group: "{{ item['group'] | default('999') }}"
  with_items:
    - { dir: "etc/pihole" }
    - { dir: "etc/dnsmasq.d" }
  tags: docker
  register: piholedocker

- name: template dns overrides
  template:
    src: custom.list.j2
    dest: "{{ pihole_root }}/etc/pihole/custom.list"
    owner: root
    group: root
    mode: 0644
  #notify: restart pihole
  tags:
    - pihole-config
    - pihole-overrides

- name: template dhcp options
  template:
    src: 07-dhcp-options.conf.j2
    dest: "{{ pihole_root }}/etc/dnsmasq.d/07-dhcp-otions.conf"
    owner: root
    group: root
    mode: 0644
  tags:
    - pihole-config
  when: pihole_dhcp
  #notify: restart pihole

- name: install dhcp-helper
  apt:
    name: dhcp-helper
    state: present
  tags:
    - packages
    - dhcp-helper
  when: pihole_dhcp
  notify: restart dhcp-helper

- name: template dhcp helper config
  template:
    src: dhcp-helper.j2
    dest: /etc/default/dhcp-helper
    owner: root
    group: root
    mode: 0644
  tags:
    - dhcp-helper
  when: pihole_dhcp
  notify: restart dhcp-helper

- name: template dhcp-helper start script
  template:
    src: wait-and-start-dhcp-helper.sh.j2
    dest: /usr/local/bin/wait-and-start-dhcp-helper.sh
    owner: root
    group: root
    mode: 0755
  tags:
    - dhcp-helper
  when: pihole_dhcp
  notify: restart dhcp-helper

  # theres a tiny marginal chance this will be overwritten
  # by the package manager but dhcp-helper hasnt been updated
  # in years. that being said, theres probably a better way
- name: template dhcp-helper systemd file
  template:
    src: dhcp-helper.service.j2
    dest: /lib/systemd/system/dhcp-helper.service
    owner: root
    group: root
    mode: 0755
  tags:
    - dhcp-helper
  when: pihole_dhcp
  notify:
    - restart dhcp-helper
    - systemctl daemon reload

- name: start and enable dhcp-helper
  service:
    name: dhcp-helper
    state: started
    enabled: yes
  tags:
    - dhcp-helper
  when: pihole_dhcp


# seems to start without docker otherwise, and fail because `docker0` doesnt
# exist yet
- name: cron to start dhcp-helper if its noot started 3 mins after boot
  template:
    src: dhcp-helper-cron.j2
    dest: /etc/cron.d/dhcp-helper
    owner: root
    group: root
    mode: 0644
  tags:
    - dhcp-helper
  when: pihole_dhcp
  notify: restart dhcp-helper

- name: disable systemd-resolved
  service:
    name: systemd-resolved
    state: stopped
    enabled: no

# If you get the error about ssl_match_hostname, see the comment in
# the nextcloud role for the docker_container task.
#
#
# TODO: does pihole run with uid 999? then change it, telegraf wants to use that

# - name: start docker container
#   docker_container:
#     name: "pihole"
#     image: "pihole/pihole:{{ pihole_version | default('latest') }}"
#     auto_remove: no
#     detach: yes
#     pull: yes
#     restart_policy: "unless-stopped"
#     state: started
#     capabilities: "{% if pihole_dhcp %}['NET_ADMIN']{% else %}[]{% endif %}"
#     env:
#       TZ: "Europe/Berlin"
#       WEBPASSWORD: "{{ pihole_web_password }}"
#       DNS1: "{{ upstream_dns_1 }}"
#       DNS2: "{{ upstream_dns_2 }}"
#       CONDITIONAL_FORWARDING: "{{ pihole_cond|string }}"
#       CONDITIONAL_FORWARDING_IP: "{{ pihole_cond_ip }}"
#       CONDITIONAL_FORWARDING_DOMAIN: "{{ pihole_cond_domain }}"
#     ports:
#       - "53:53/tcp"
#       - "53:53/udp"
#       - "{{ pihole_http_inet }}:{{ pihole_http_port }}:80/tcp"
#     dns_servers:
#       - 127.0.0.1
#       - pihole_dns_1
#       - pihole_dns_2
#     hostname: "{{ inventory_hostname.split('.')[0] }}-pihole"
#     networks_cli_compatible: no
#     networks:
#       - name: bridgewithdns
#         ipv4_address: "{{ pihole_docker_ip }}"
#     volumes:
#       - "{{ pihole_root }}/etc/pihole:/etc/pihole"
#       - "{{ pihole_root }}/etc/dnsmasq.d:/etc/dnsmasq.d"
#   tags: pihole-container

- name: start docker container
  docker_container:
    name: "pihole"
    image: "pihole/pihole:{{ pihole_version | default('latest') }}"
    auto_remove: no
    detach: yes
    pull: yes
    restart_policy: "unless-stopped"
    state: started
    network_mode: host
    # capabilities:
    #   - NET_ADMIN
    env:
      WEB_PORT: "8081"
      TZ: "Europe/Berlin"
      WEBPASSWORD: "{{ pihole_web_password }}"
      DNS1: "{{ upstream_dns_1 }}"
      DNS2: "{{ upstream_dns_2 }}"
      CONDITIONAL_FORWARDING: "{{ pihole_cond|string }}"
      CONDITIONAL_FORWARDING_IP: "{{ pihole_cond_ip }}"
      CONDITIONAL_FORWARDING_DOMAIN: "{{ pihole_cond_domain }}"
    ports:
      - "53/tcp"
      - "53/udp"
      - "80/tcp"
    dns_servers:
      - 127.0.0.1
      - pihole_dns_1
      - pihole_dns_2
    hostname: "{{ inventory_hostname.split('.')[0] }}-pihole"
    volumes:
      - "{{ pihole_root }}/etc/pihole:/etc/pihole"
      - "{{ pihole_root }}/etc/dnsmasq.d:/etc/dnsmasq.d"
  tags: pihole-container

# - name: start docker container
#   docker_container:
#     name: "pihole"
#     image: "pihole/pihole:{{ pihole_version | default('latest') }}"
#     auto_remove: no
#     detach: yes
#     pull: yes
#     restart_policy: "unless-stopped"
#     state: started
#     capabilities:
#       - NET_ADMIN
#     env:
#       TZ: "Europe/Berlin"
#       WEBPASSWORD: "{{ pihole_web_password }}"
#       DNS1: "{{ upstream_dns_1 }}"
#       DNS2: "{{ upstream_dns_2 }}"
#       CONDITIONAL_FORWARDING: "{{ pihole_cond|string }}"
#       CONDITIONAL_FORWARDING_IP: "{{ pihole_cond_ip }}"
#       CONDITIONAL_FORWARDING_DOMAIN: "{{ pihole_cond_domain }}"
#     ports:
#       - "53/tcp"
#       - "53/udp"
#       - "80/tcp"
#     dns_servers:
#       - 127.0.0.1
#       - upstream_dns_1
#       - upstream_dns_2
#     hostname: "{{ inventory_hostname.split('.')[0] }}-pihole"
#     networks_cli_compatible: no
#     networks:
#       - name: macvlan-local
#         ipv4_address: "{{ pihole_docker_ip }}"
#     volumes:
#       - "{{ pihole_root }}/etc/pihole:/etc/pihole"
#       - "{{ pihole_root }}/etc/dnsmasq.d:/etc/dnsmasq.d"
#   tags: pihole-container

# - name: wait for {{ pihole_docker_ip }}:53
#   wait_for:
#     port: 53
#     host: "{{ pihole_docker_ip }}"
#     sleep: 4
#   tags: pihole-container

- name: wait for port 53
  wait_for:
    port: 53
    host: localhost
    sleep: 4
  tags: pihole-container
