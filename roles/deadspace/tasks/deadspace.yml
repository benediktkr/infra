---

- name: copy mount script
  copy:
    src: mount-if-exists.sh
    dest: /usr/local/bin/mount-if-exists.sh
    owner: root
    group: root
    mode: 0755
  tags:
    - deadspace-mounts

- name: copy LUKS keyfile
  copy:
    src: private/keyfile-deadspace
    dest: /root/keyfile-deadspace
    owner: root
    group: root
    mode: 0700
  no_log: true
  tags:
    - keyfile-deadspace
    - deadspace-keyfile
    - deadspace-mounts

- name: template crypttab
  template:
    src: crypttab.j2
    dest: /etc/crypttab
    owner: root
    group: root
    mode: 0644
  when: '"name" in deadspace_crypttab.root.keys()'
  tags:
    - crypttab
    - deadspace-mounts

- name: add luks volumes to fstab without mounting
  mount:
    path: "{{ item.mountpoint }}"
    src: /dev/mapper/{{ item.name }}
    fstype: "{{ item.fstype }}"
    # present: add to fstab, mounted: mount and add to fstab
    state: present
  with_items: "{{ deadspace_crypttab.disks }}"
  when: '"mountpoint" in item '
  loop_control:
    label: "{{ item.name }}"
  tags:
    - crypttab
    - deadspace-mounts

#- name: mount luks volumes
#  mount:
#    path: "{{ item.mountpoint }}"
#    src: /dev/mapper/{{ item.name }}
#    fstype: "{{ item.fstype }}"
#    # present: add to fstab, mounted: mount and add to fstab
#    #state: present
#    state: mounted
#  with_items: "{{ deadspace_crypttab.disks }}"
#  when: '"mountpoint" in item '
#  ignore_errors: true
#  loop_control:
#    label: "{{ item.name }}"
#  tags:
#    - crypttab
#    - deadspace-mounts

- name: mount luks volumes if they are unlocked
  command: mount-if-exists.sh {{ item.name }} {{ item.mountpoint }}
  with_items: "{{ deadspace_crypttab.disks }}"
  loop_control:
    label: "{{ item.name }}"
  when: '"mountpoint" in item'
  register: mount_if_exists
  changed_when: '"mounted "~item.name in mount_if_exists.stdout'
  tags:
    - deadspace-mounts

- name: install packages
  apt:
    update_cache: true
    name:
      - mergerfs
      - btrfs-progs
      - rclone
      #- udisksctl
    state: latest
  when: not skip_apt|default(false)
  tags:
    - packages

- name: fail if path has trailing slash
  fail:
    msg: "invalid path: '{{ item.path }}'"
  when: (item.path.endswith('/') or not item.path.startswith(deadspace_root)) | bool
  with_flattened: "{{ deadspace.values() }}"
  loop_control:
    label: "{{ item.path }}"
  run_once: True
  delegate_to: localhost

- name: deadspace ssh private key
  template:
    src: private/sshkeys/deadspace
    dest: /root/.ssh/deadspace
    owner: root
    group: root
    mode: '0700'
  no_log: true
  vars:
    prediff_cmd: echo
  tags:
    - sshkeys

- name: poke deadspaces at origin
  file:
    state: directory
    path: "{{ item.path }}"
    owner: "{{ item.owner|default(deadspace_user) }}"
    group: "{{ item.group|default(deadspace_user) }}"
    mode: "{{ item.mode|default('0775') }}"
    recurse: false
  loop_control:
    label: "{{ item.path }}"
  with_items: "{{ deadspace[inventory_hostname]|default([]) }}"

- name: add comment files
  lineinfile:
    path: "{{ item.path }}/.deadspace-comment"
    line: "{{ item.comment }}"
    create: true
  when: item.comment is defined
  loop_control:
    label: "{{ item.path }}"
  with_items: "{{ deadspace[inventory_hostname]|default([]) }}"

- name: standard dirs
  file:
    state: directory
    path: "{{ deadspace_root }}/{{ item }}"
    owner: root
    group: root
    mode: 0775
    recurse: false
  loop_control:
    label: "{{ deadspace_root }}/{{ item }}"
  with_items: "{{ deadspace_standard }}"

- name: tepmlate push script
  template:
    src: "{{ item }}.j2"
    dest: "/usr/local/bin/{{ item }}"
    owner: root
    group: root
    mode: 0770
  with_items:
    - deadspace_push.sh
    - deadspace_pull.sh

- name: template cron job
  template:
    src: "deadspace_sync-cron.j2"
    dest: "/etc/cron.d/deadspace_sync"
    owner: root
    group: root
    mode: 0600
  tags:
    - cron
