#!/usr/bin/env python3

import argparse
from datetime import datetime, timezone
from subprocess import run, CalledProcessError
from os import path, stat, listdir
import sys

from loguru import logger

import sudoisinflux

parser = argparse.ArgumentParser()
parser.add_argument("--interval", default="alpha")
parser.add_argument("--debug", action="store_true")
parser.add_argument("--dry-run", action="store_true", help="dont run rsnapshot")
args = parser.parse_args()

if not args.debug and not args.dry_run:
    logger.remove()
    logger.add(sys.stderr, level="WARNING")
else:
    logger.success("verbose output")

rsnapshot_bin = "/usr/bin/rsnapshot"
date_bin = "/usr/bin/date"
du_bin = "/usr/bin/du"

marker_name = ".backup_age_marker"

latest_path = path.join("{{ rsnapshot_root }}", f"{args.interval}.0")
marker_path = path.join(latest_path, marker_name)

mb = lambda bytes: int(bytes//1024)
gb = lambda bytes: int(mb(bytes)//1024)

def tags(host=None):
    return {'host': '{{ inventory_hostname }}' if host is None else host,
            'interval': args.interval,
            'path': latest_path }


def utc_now():
    return datetime.now(tz=timezone.utc)

def utc_isoformat():
    return utc_now().isoformat()

def du(path):
    du_cmd = [du_bin, "-s", path]
    du = run(du_cmd, capture_output=True)

    try:
        return int(du.stdout.decode().split('\t')[0])
    except ValueError as e:
        logger.error(" ".join(du_cmd))
        logger.error(du.stdout)
        raise e

def update_marker():
    with open(marker_path, 'w') as f:
        f.write(utc_isoformat() + "\n")

def read_host_marker(hostname):
    host_marker = path.join(latest_path, hostname, "root", marker_name)
    with open(host_marker, 'r') as f:
        return datetime.fromisoformat(f.read().strip())

def get_hosts_in_backup():
    return [a for a in listdir(latest_path) if a[0].isalpha()]

def rsnapshot():
    try:
        before = du(latest_path)
        logger.debug(f"starting. current size: {gb(before)}G")

        if not args.dry_run:
            run([rsnapshot_bin, args.interval])

        after = du(latest_path)
        logger.debug(f"rsnapshot done, current size: {gb(after)}G")

        return after - before, after

    except CalledProcessError:
        raise

def read_all_host_markers():
    now = utc_now()
    for host in get_hosts_in_backup():
        try:
            marker = read_host_marker(host)
            age = now - marker
            size = du(path.join(latest_path, host))
            yield host, marker, age, size
        except (FileNotFoundError, ValueError) as e:
            logger.error(f"backup age marker missing/broken for {host}: {e}")
            continue

if __name__ == "__main__":
    if not path.exists(latest_path):
        logger.error(f"path '{latest_path}' doesnt exist")
        raise SystemExit(1)

    diff, size = rsnapshot()

    logger.info(f"diff: {mb(diff)}M")

    for item in read_all_host_markers():
        days = int(item[2].days)
        secs = int(item[2].seconds)
        mins = int(secs//60)
        host_size_mb = int(mb(item[3]))
        host = item[0]

        sudoisinflux.write({'tags': tags(host),
                            'measurement': 'rsnapshot',
                            'time': utc_isoformat(),
                            'fields': {'age_seconds': secs,
                                       'host_size_mb': host_size_mb }},
                           dry_run=args.dry_run)

        if days > 0:
            if days == 1:
                level = "WARNING"
            else:
                level = "ERROR"
            logger.log(level, f"backup for {host} is {days}d old")
        else:
            logger.info(f"{host}: {mins} mins")


    sudoisinflux.write({'tags': tags(),
                        'measurement': 'rsnapshot',
                        'time': utc_isoformat(),
                        'fields': {'total_size_mb': int(mb(size)) }},
                       dry_run=args.dry_run)


    # only update the marker if the full backup was succesful
    update_marker()
