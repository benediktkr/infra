---

homeassistant:
  customize:
    binary_sensor.ping_internet_online_cloudflare_1:
      friendly_name: "Cloudflare 1.1.1.1"
      package: internet_online
    binary_sensor.ping_internet_online_cloudflare_2:
      friendly_name: "Cloudflare: 1.0.0.1"
      package: internet_online
    binary_sensor.ping_internet_online_google_1:
      friendly_name: "Google: 8.8.8.8"
      package: internet_online
    binary_sensor.ping_internet_online_google_2:
      friendly_name: "Google: 8.8.4.4"
      package: internet_online
    binary_sensor.ping_internet_online_hi_1:
      friendly_name: "Haskoli Islands: hi.is"
      package: internet_online

    binary_sensor.internet_online:
      friendly_name: "Internet connection is up"
      package: internet_online
    binary_sensor.internet_offline:
      friendly_name: "Internet connection"
      package: internet_online

    binary_sensor.vpn_sudo_is_offline:
      friendly_name: "sudo.is vpn"
      package: internet_online
    binary_sensor.vpn_sudo_is_online:
      friendly_name: "sudo.is vpn"
      package: internet_online
    binary_sensor.vpn_sudo_is_ber1_offline:
      friendly_name: "sudo.is vpn connection with ber1"
      package: internet_online
    binary_sensor.vpn_sudo_is_ls54_edge_offline:
      friendly_name: "sudo.is vpn connection to LS54 edge router"
      package: internet_online
    binary_sensor.vpn_sudo_is_ls54_online:
      friendly_name: "sudo.is vpn to LS54"
      package: internet_online
    binary_sensor.vpn_sudo_is_ls54_offline:
      friendly_name: "sudo.is vpn to LS54"
      package: "internet online"
    binary_sensor.vpn_sudo_is_rvk0_offline:
      friendly_name: "sudo.is vpn to rvk0"
      package: internet_online
      comment: "not part of binary_sensor.vpn_sudo_is"

    binary_sensor.ping_s21_dns:
      friendly_name: "S21 main DNS server"
      package: internet_online
    binary_sensor.ping_vpn_ber1:
      friendly_name: "ping to ber1"
      package: internet_online
    binary_sensor.ping_vpn_ls54_edge:
      friendly_name: "ping to ls54 edge router"
      package: internet_online
    binary_sensor.ping_turris_wwan_gateway:
      friendly_name: "Ping to Turris wwan gateway (TP-Link M7200)"
      package: internet_online
    binary_sensor.ping_turris_wwan_interface:
      friendly_name: "Ping to Turris wwan gateway"
      package: internet_online
    binary_sensor.internet_failover_mwan3_wwan_up:
      friendly_name: "WWAN failover interface"
    binary_sensor.internet_failover_mwan3_wwan_down:
      friendly_name: "WWAN failover interface DOWN"
    binary_sensor.internet_failover_mwan3_wwan_active:
      friendly_name: "Internet connection is using failover interface"
      package: internet_online
    binary_sensor.cloudflare_ddns_home0157_sudo_is:
      friendly_name: "home0157.sudo.is is up to date"
      package: internet_online

    # WAN
    sensor.edge_wan_in:
      friendly_name: "Edge router WAN in"
      package: internet_online
    sensor.edge_wan_out:
      friendly_name: "Edge router WAN out"
      package: internet_online
    # WWAN
    sensor.edge_wwan_in:
      friendly_name: "Edge router WWAN in"
      package: internet_online
    sensor.edge_wwan_out:
      friendly_name: "Edge router WWAN out"
      package: internet_online
    # wg0
    sensor.edge_wg0_in:
      friendly_name: "Edge router wg0 in"
      package: internet_online
    sensor.edge_wg0_out:
      friendly_name: "Edge router wg0 out"
      package: internet_online
    sensor.edge_wg0_combined:
      friendly_name: "Edge router wg0 (combined)"
      package: internet_online
    # LAN
    sensor.edge_lan_in:
      friendly_name: "Edge router LAN in"
      package: internet_online
    sensor.edge_LAN_out:
      friendly_name: "Edge router LAN out"
      package: internet_online
    sensor.edge_LAN_combined:
      friendly_name: "Edge router LAN (combined)"
      package: internet_online


    # CPU
    sensor.edge_cpu:
      friendly_name: "Edge router CPU"
      package: internet_online

sensor:
  - platform: netdata
    host: !secret s21_router_hostname
    resources:
      # WAN
      turris_wan_in:
        data_group: "net.eth2.7"
        element: "received"
        icon: "mdi:download-network-outline"
      turris_wan_out:
        data_group: "net.eth2.7"
        element: "sent"
        icon: "mdi:upload-network-outline"

      # WWAN
      turris_wwan_in:
        data_group: "net.wlan1"
        element: "received"
        icon: "mdi:download-network-outline"
      turris_wwan_out:
        data_group: "net.wlan1"
        element: "sent"
        icon: "mdi:upload-network-outline"

      # wg0
      turris_wg0_in:
        data_group: "net.wg0"
        element: "received"
        icon: "mdi:download-network-outline"
      turris_wg0_out:
        data_group: "net.wg0"
        element: "sent"
        icon: "mdi:upload-network-outline"

      # br-lan
      turris_br_lan_in:
        data_group: "net.br-lan"
        element: "received"
        icon: "mdi:download-network-outline"
      turris_br_lan_out:
        data_group: "net.br-lan"
        element: "sent"
        icon: "mdi:upload-network-outline"

      # br-lan-care
      turris_br_lan_care_in:
        data_group: "net.br-lan-care"
        element: "received"
        icon: "mdi:download-network-outline"
      turris_br_lan_care_out:
        data_group: "net.br-lan-care"
        element: "sent"
        icon: "mdi:upload-network-outline"

      # br-nvr
      turris_br_nvr_in:
        data_group: "net.br-nvr"
        element: "received"
        icon: "mdi:download-network-outline"
      turris_br_nvr_out:
        data_group: "net.br-nvr"
        element: "sent"
        icon: "mdi:upload-network-outline"

      # CPU
      turris_cpu_softirq:
        data_group: "system.cpu"
        element: "softirq"
      turris_cpu_user:
        data_group: "system.cpu"
        element: "user"
      turris_cpu_system:
        data_group: "system.cpu"
        element: "system"
      turris_cpu_nice:
        data_group: "system.cpu"
        element: "nice"
      turris_cpu_iowait:
        data_group: "system.cpu"
        element: "iowait"

template:
  - sensor:
      # WAN
    - name: edge_wan_in
      icon: "mdi:download-network-outline"
      unit_of_measurement: "Mbit/s"
      state_class: measurement
      device_class: data_rate
      availability: |
        {{ states("sensor.netdata_turris_wan_in") | float(none) | is_number }}
      state: |
        {% set kbits = states("sensor.netdata_turris_wan_in") %}
        {% set mbits = kbits|float / 1000 %}
        {{ mbits|round(2) }}
    - name: edge_wan_out
      icon: "mdi:upload-network-outline"
      unit_of_measurement: "Mbit/s"
      state_class: measurement
      device_class: data_rate
      availability: |
        {{ states("sensor.netdata_turris_wan_out") | float(none) | is_number }}
      state: |
        {% set kbits = states("sensor.netdata_turris_wan_out") %}
        {% set mbits = kbits|float / 1000 %}
        {{ mbits|round(2)|abs }}

      # WWAN
    - name: edge_wwan_in
      icon: "mdi:download-network-outline"
      unit_of_measurement: "Mbit/s"
      state_class: measurement
      device_class: data_rate
      availability: |
        {{ states("sensor.netdata_turris_wwan_in") | float(none) | is_number }}
      state: |
        {% set kbits = states("sensor.netdata_turris_wwan_in") %}
        {% set mbits = kbits|float / 1000 %}
        {{ mbits|round(2) }}
    - name: edge_wwan_out
      icon: "mdi:upload-network-outline"
      unit_of_measurement: "Mbit/s"
      state_class: measurement
      device_class: data_rate
      availability: |
        {{ states("sensor.netdata_turris_wwan_out") | float(none) | is_number }}
      state: |
        {% set kbits = states("sensor.netdata_turris_wwan_out") %}
        {% set mbits = kbits|float / 1000 %}
        {{ mbits|round(2)|abs }}

      # wg0
    - name: edge_wg0_in
      icon: "mdi:download-network-outline"
      unit_of_measurement: "Mbit/s"
      state_class: measurement
      device_class: data_rate
      availability: |
        {{ states("sensor.netdata_turris_wg0_in") | float(none) | is_number }}
      state: |
        {% set kbits = states("sensor.netdata_turris_wg0_in") %}
        {% set mbits = kbits|float / 1000 %}
        {{ mbits|round(2) }}
    - name: edge_wg0_out
      icon: "mdi:upload-network-outline"
      unit_of_measurement: "Mbit/s"
      state_class: measurement
      device_class: data_rate
      availability: |
        {{ states("sensor.netdata_turris_wg0_out") | float(none) | is_number }}
      state: |
        {% set kbits = states("sensor.netdata_turris_wg0_out") %}
        {% set mbits = kbits|float / 1000 %}
        {{ mbits|round(2)|abs }}
    - name: edge_wg0_combined
      icon: "mdi:network-outline"
      unit_of_measurement: "Mbit/s"
      state_class: measurement
      device_class: data_rate
      availability: |
        {{
        states("sensor.edge_wg0_in") | float(none) | is_number
        and states("sensor.edge_wg0_out") | float(none) | is_number
        }}
      state: |
        {% set in = states("sensor.edge_wg0_in") %}
        {% set out = states("sensor.edge_wg0_out") %}
        {% set total = in|float + out|float %}
        {{ total|float|round(2) }}


      # br-lan
    - name: edge_lan_in
      icon: "mdi:download-network-outline"
      unit_of_measurement: "Mbit/s"
      state_class: measurement
      device_class: data_rate
      availability: |
        {{ states("sensor.netdata_turris_br_lan_in") | float(none) | is_number }}
      state: |
        {% set kbits = states("sensor.netdata_turris_br_lan_in") %}
        {% set mbits = kbits|float / 1000 %}
        {{ mbits|round(2) }}
    - name: edge_lan_out
      icon: "mdi:upload-network-outline"
      unit_of_measurement: "Mbit/s"
      state_class: measurement
      device_class: data_rate
      availability: |
        {{ states("sensor.netdata_turris_br_lan_out") | float(none) | is_number }}
      state: |
        {% set kbits = states("sensor.netdata_turris_br_lan_out") %}
        {% set mbits = kbits|float / 1000 %}
        {{ mbits|round(2)|abs }}
    - name: edge_lan_combined
      icon: "mdi:network-outline"
      unit_of_measurement: "Mbit/s"
      state_class: measurement
      device_class: data_rate
      availability: |
        {{
        states("sensor.edge_lan_in") | float(none) | is_number
        and states("sensor.edge_lan_out") | float(none) | is_number
        }}
      state: |
        {% set in = states("sensor.edge_lan_in") %}
        {% set out = states("sensor.edge_lan_out") %}
        {% set total = in|float + out|float %}
        {{ total|float|round(2) }}



      # CPU
    - name: edge_cpu
      icon: "mdi:router-network"
      unit_of_measurement: "%"
      state_class: measurement
      device_class: "power_factor"
      availability: |
        {{
          is_number(states("sensor.netdata_turris_cpu_softirq"))
          and is_number(states("sensor.netdata_turris_cpu_user"))
          and is_number(states("sensor.netdata_turris_cpu_system"))
          and is_number(states("sensor.netdata_turris_cpu_nice"))
          and is_number(states("sensor.netdata_turris_cpu_iowait"))
        }}
      state: |
        {% set softirq = states("sensor.netdata_turris_cpu_softirq") %}
        {% set user = states("sensor.netdata_turris_cpu_user") %}
        {% set system = states("sensor.netdata_turris_cpu_system") %}
        {% set nice = states("sensor.netdata_turris_cpu_nice") %}
        {% set iowait = states("sensor.netdata_turris_cpu_iowait") %}
        {% set cpu = [softirq|float, user|float, system|float, nice|float, iowait|float] %}
        {{ cpu | sum | float | round(2) }}

  - binary_sensor:
      - name: internet_online
        device_class: "connectivity"
        icon: >-
          {% if is_state(this.entity_id, "on") %}
          mdi:check-network
          {% else %}
          mdi:close-network
          {% endif %}
        state: |
          {{ not is_state("binary_sensor.internet_offline", "on") }}
        attributes:
          active_uplink: |
            {% if is_state("binary_sensor.internet_failover_mwan3_wwan_active", "on") %}
            Failover WWAN
            {% else %}
            Main WAN
            {% endif %}
          vpn: |
            {{ not is_state("binary_sensor.vpn_sudo_is_online", "off") }}
          LS54: |
            {{ not is_state("binary_sensor.vpn_sudo_is_ls54_online", "off") }}
          wwan_failover_interface: |
            {{ not is_state("binary_sensor.internet_failover_mwawn3_wwan", "off") }}

      - name: internet_offline
        device_class: "problem"
        icon: |
          {% if is_state(this.entity_id, "on") %}
          mdi:close-network
          {% else %}
          mdi:check-network
          {% endif %}
        availability: |
          {{
          has_value("binary_sensor.ping_internet_online_cloudflare_1")
          and has_value("binary_sensor.ping_internet_online_cloudflare_2")
          and has_value("binary_sensor.ping_internet_online_google_1")
          and has_value("binary_sensor.ping_internet_online_google_2")
          and has_value("binary_sensor.ping_internet_online_hi_1")
          and has_value("sensor.hass_uptime")
          and states("sensor.hass_uptime") | as_timestamp(none) | is_number
          and now() | as_timestamp(none) | is_number
          }}
        state: |
          {{
          is_state("binary_sensor.ping_internet_online_cloudflare_1", "off")
          and is_state("binary_sensor.ping_internet_online_cloudflare_2", "off")
          and is_state("binary_sensor.ping_internet_online_google_1", "off")
          and is_state("binary_sensor.ping_internet_online_google_2", "off")
          and is_state("binary_sensor.ping_internet_online_hi_1", "off")
          and now()|as_timestamp - states("sensor.hass_uptime")|as_timestamp > 300.0
          }}
        attributes:
          comment: |
            does not report "on" if 'sensor.hass_uptime' is less than 5m

      - name: vpn_sudo_is_offline
        device_class: "problem"
        icon: >-
          {% if is_state(this.entity_id, "on") %}
          mdi:close-network
          {% else %}
          mdi:check-network
          {% endif %}
        state: >-
          {{
          is_state("binary_sensor.ping_vpn_turris", "off")
          and is_state("binary_sensor.ping_vpn_ber1", "off")
          and is_state("binary_sensor.ping_vpn_ls54_edge", "off")
          and is_state("binary_sensor.ping_vpn_mainframe", "off")
          and is_state("binary_sensor.ping_vpn_edge", "off")
          }}

      - name: vpn_sudo_is_online
        device_class: "connectivity"
        icon: >-
          {% if is_state(this.entity_id, "on") %}
          mdi:check-network
          {% else %}
          mdi:close-network
          {% endif %}
        state: |
          {{ not is_state("binary_sensor.vpn_sudo_is_offline", "on") }}

      - name: vpn_sudo_is_ber1_offline
        device_class: "problem"
        icon: >-
          {% if is_state(this.entity_id, "on") %}
          mdi:close-network
          {% else %}
          mdi:check-network
          {% endif %}
        state: >-
          {{ is_state("binary_sensor.ping_vpn_ber1", "off") }}

      - name: vpn_sudo_is_rvk0_offline
        device_class: "problem"
        icon: >-
          {% if is_state(this.entity_id, "on") %}
          mdi:close-network
          {% else %}
          mdi:check-network
          {% endif %}
        state: >-
          {{ is_state("binary_sensor.ping_vpn_rvk0", "off") }}

      - name: vpn_sudo_is_ls54_edge_offline
        device_class: "problem"
        icon: >-
          {% if is_state(this.entity_id, "on") %}
          mdi:close-network
          {% else %}
          mdi:check-network
          {% endif %}
        state: >-
          {{ is_state("binary_sensor.ping_vpn_ls54_edge", "off") }}

        # binary_sensor.pihole_ls_54_sudo_is_status turns 'unavailable' when
        # disconnected.
        #
      - name: vpn_sudo_is_ls54_online
        device_class: "connectivity"
        icon: >-
          {% if is_state(this.entity_id, "on") %}
          mdi:check-network
          {% else %}
          mdi:close-network
          {% endif %}
        state: >-
          {{
          not is_state("binary_sensor.vpn_sudo_is_ls54_edge_offline", "on")
          and not is_state("binary_sensor.vpn_sudo_is_ber1_offline", "on")
          and not is_state("device_tracker.unifi_lychener_str", "away")
          and is_state("binary_sensor.pihole_ls54_sudo_is_status", "on")

          }}
      - name: vpn_sudo_is_ls54_offline
        device_class: "problem"
        icon: >-
          {% if is_state(this.entity_id, "on") %}
          mdi:close-network
          {% else %}
          mdi:check-network
          {% endif %}
        state: >-
          {{ is_state("binary_sensor.vpn_sudo_is_ls54_online", "off") }}

      - name: internet_failover_mwan3_wwan_down
        device_class: "problem"
        icon: >-
          {% if is_state(this.entity_id, "on") %}
          mdi:close-network
          {% else %}
          mdi:check-network
          {% endif %}
        state: >-
          {{ is_state("binary_sensor.ping_turris_wwan_gateway", "off") }}

        # meant to be updated through restapi or appdaemon
        # but this is something for starters
      - name: internet_failover_mwan3_wwan_active
        device_class: "problem"
        icon: >-
          {% if is_state(this.entity_id, "on") %}
          mdi:alert-box-outline
          {% else %}
          mdi:network-outline
          {% endif %}
        availability: >-
          {{ has_value("sensor.myip") }}
        state: >-
          {{ states("sensor.myip").startswith("46") }}

      - name: cloudflare_ddns_home0157_sudo_is
        device_class: "problem"
        icon: >-
          {% if is_state(this.entity_id, "on") %}
          mdi:web-off
          {% else %}
          mdi:web
          {% endif %}
        availability: >-
          {{
          has_value("sensor.myip")
          and has_value("sensor.home0157_sudo_is")
          }}
        state: >-
          {{ states("sensor.myip") != states("sensor.home0157_sudo_is") }}











