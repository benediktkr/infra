---

- name: make dirs
  file:
    path: "{{ systemuserlist.matrix.home }}/{{ item.name }}"
    state: directory
    mode: "{{ item.mode|default(750) }}"
    owner: "{{ item.owner|default('matrix') }}"
    group: matrix
  with_items:
    - name: data
    - name: element
      mode: 644
    - name: postgres
      owner: 70
      mode: 700
    - name: html
      mode: 644
    - name: registration

- name: matrix index.html
  template:
    src: index.html.j2
    dest: "{{ systemuserlist.matrix.home }}/html/index.html"
    owner: matrix
    group: www-data
    mode: 0644
  tags:
    - matrix-html

- name: element config
  template:
    src: element-config.json.j2
    dest: "{{ systemuserlist.matrix.home }}/element/config.json"
    owner: matrix
    group: matrix
    mode: 0664
  tags:
    - element

- name: matrix-registration config
  template:
    src: registration-config.yml.j2
    dest: "{{ systemuserlist.matrix.home }}/registration/config.yaml"
    owner: root
    group: root
    mode: 0644
  tags:
    - matrix-registration

- name: template nginx vhost
  template:
    src: 01-matrix.j2
    dest: /etc/nginx/sites-enabled/01-matrix
    owner: root
    group: root
    mode: 0644
  tags:
    - nginx
    - matrix-nginx
  notify: reload nginx

- name: template config
  template:
    src: "{{ item }}.j2"
    dest: "{{ systemuserlist.matrix.home }}/data/{{ item }}"
    mode: 0600
    owner: matrix
    group: matrix
  with_items:
    - log.config
    - homeserver.yaml
    - turnserver.conf
  tags:
    - matrix-config

- name: copy signing key
  copy:
    src: private/matrix/{{ matrix_domain }}.signing.key
    dest: "{{ systemuserlist.matrix.home }}/data/"
    mode: 0644
    owner: matrix
    group: matrix

- name: redis container for matrix synapse
  docker_container:
    name: matrix_redis
    image: "redis:latest"
    restart_policy: "unless-stopped"
    auto_remove: no
    detach: yes
    pull: yes
    state: started
    container_default_behavior: compatibility
    env:
      REDIS_HOST: matrix_redis
    networks_cli_compatible: no
    networks:
      - name: bridgewithdns
  tags:
    - matrix-container
    - docker-containers

- name: postgres container for matrix synapse
  docker_container:
    name: matrix_postgresql
    state: started
    image: docker.io/postgres:12-alpine
    container_default_behavior: compatibility
    restart_policy: "unless-stopped"
    networks_cli_compatible: no
    networks:
      - name: bridgewithdns
    env:
      POSTGRES_USER: "{{ systemuserlist.matrix.username }}"
      POSTGRES_PASSWORD: "{{ systemuserlist.matrix.postgres_passwd }}"
      # ensure the database gets created correctly
      # https://github.com/matrix-org/synapse/blob/master/docs/postgres.md#set-up-database
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    mounts:
      - type: bind
        source: "{{ systemuserlist.matrix.home }}/postgres"
        target: /var/lib/postgresql/data
  tags:
    - matrix-container
    - docker-containers

# register_new_matrix_user -u $username -t bot -c /data/homeserver.yaml http://localhost:8008

- name: start synapse container
  docker_container:
    name: matrix
    image: avhost/docker-matrix:latest
    auto_remove: no
    detach: yes
    pull: yes
    restart_policy: "unless-stopped"
    state: started
    user: "{{ systemuserlist.matrix.uid }}:{{ systemuserlist.matrix.gid }}"
    container_default_behavior: compatibility
    networks_cli_compatible: no
    networks:
      - name: bridgewithdns
        ipv4_address: "{{ bridgewithdns.matrix }}"
    mounts:
      - type: bind
        source: "{{ systemuserlist.matrix.home }}/data"
        target: /data
      - type: bind
        read_only: yes
        source: /etc/letsencrypt/live/{{ matrix_domain }}/fullchain.pem
        target: /data/{{ matrix_domain }}.crt
      - type: bind
        read_only: yes
        source: /etc/letsencrypt/live/{{ matrix_domain }}/privkey.pem
        target: /data/{{ matrix_domain }}.key
    env:
      SERVER_NAME: "{{ matrix_domain }}"
  tags:
    - matrix-container
    - docker-containers

- name: start element-web container
  docker_container:
    name: matrix_element
    image: bubuntux/element-web:latest
    auto_remove: no
    detach: yes
    pull: yes
    restart_policy: "unless-stopped"
    state: started
    container_default_behavior: compatibility
    networks_cli_compatible: no
    networks:
      - name: bridgewithdns
        ipv4_address: "{{ bridgewithdns.element }}"
    mounts:
      - type: bind
        source: "{{ systemuserlist.matrix.home }}/element/config.json"
        target: /etc/element-web/config.json
        read_only: yes
  tags:
    - element
    - element-container
    - docker-containers

- name: start matrix-registration container
  docker_container:
    name: matrix_registration
    image: zeratax/matrix-registration:{{ matrix_registration_tag }}
    auto_remove: no
    detach: yes
    pull: yes
    restart_policy: "unless-stopped"
    state: started
    container_default_behavior: compatibility
    networks_cli_compatible: no
    user: "{{ systemuserlist.matrix.uid }}:{{ systemuserlist.matrix.gid }}"
    network_mode: bridgewithdns
    networks:
      - name: bridgewithdns
        ipv4_address: "{{ bridgewithdns.matrix_reg }}"
    mounts:
      - type: bind
        source: "{{ systemuserlist.matrix.home }}/registration"
        target: /data
        read_only: no
    command: serve
  tags:
    - matrix-registration
    - matrix-registration-container
    - docker-containers

- name: template scripts
  template:
    src: "{{ item }}.j2"
    dest: /usr/local/bin/{{ item }}
    mode: 0750
    owner: root
    group: root
  tags:
    - backup
    - matrix-backup
    - matrix-scripts
    - matrix-registration
  loop_control:
    label: "{{ item }}"
  with_items:
    - synapse-postgres-backup.sh
    - matrix-invite.py

- name: cron file
  template:
    src: matrix-cron.j2
    dest: /etc/cron.d/matrix
    mode: 0600
    owner: root
    group: root
  tags:
    - backup
    - matrix-backup
    - cron

- name: telegraf file
  template:
    src: matrix-telegraf.conf.j2
    dest: /etc/telegraf/telegraf.d/matrix.conf
  notify:
    - restart telegraf
  tags:
    - telegraf-config
