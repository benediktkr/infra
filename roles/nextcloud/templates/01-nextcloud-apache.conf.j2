server {

  listen 443 ssl http2;
  {% if inventory_hostname in wg_clients -%}
  listen {{ wg_clients[inventory_hostname].ip }}:443 ssl http2;
  {% endif -%}
  # listen   [::]:443 ssl; # listen for ipv6

  include listen-proxy-protocol.conf;
  server_name {{ item.url }};

  if ($scheme != "https") {
    return 301 https://$host$request_uri;
  }

  # ATTN, disbaled: Strict-Transport-Security headers please read into this
  #add_header Strict-Transport-Security "max-age=15768000; includeSubDomains; preload;" always;
  #
  # WARNING: Only add the preload option once you read about
  # the consequences in https://hstspreload.org/. This option
  # will add the domain to a hardcoded list that is shipped
  # in all major browsers and getting removed from this list
  # could take several months.
  add_header Referrer-Policy "no-referrer" always;
  #add_header X-Content-Type-Options "nosniff" always;
  #add_header X-Download-Options "noopen" always;
  #add_header X-Frame-Options "SAMEORIGIN" always;
  #add_header X-Permitted-Cross-Domain-Policies "none" always;
  #add_header X-Robots-Tag "none" always;
  add_header X-XSS-Protection "1; mode=block" always;

  # telling cloudflare to not proxy anything
  # The private response directive indicates that the response can be stored only in a private cache (e.g. local caches in browsers).
  add_header Cache-Control "private, max-age=3600" always;

  # Remove X-Powered-By, which is an information leak
  fastcgi_hide_header X-Powered-By;

  access_log /var/log/nginx/access_{{ item.url }}.log main;
  error_log /var/log/nginx/error_{{ item.url }}.log warn;

  {% set domain = item.url.split('.')[-2:] | join(".") %}
  ssl_session_timeout 5m;
  ssl_certificate /usr/local/etc/certs/{{ item.url }}/fullchain.pem;
  ssl_certificate_key /usr/local/etc/certs/{{ item.url }}/privkey.pem;

  client_max_body_size 2G;
  client_body_buffer_size 1024m;
  proxy_max_temp_file_size 2048m;
  #proxy_max_temp_file_size 0;
  fastcgi_buffers 64 4K;

  location / {
    proxy_pass         http://{{ item.docker_ip }}:{{ item.container_port }};

    proxy_redirect     off;
    proxy_set_header   Host $host;
    proxy_set_header   X-Real-IP $remote_addr;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Host $server_name;

  }

  location = /.well-known/carddav {
    return 301 $scheme://$host:$server_port/remote.php/dav;
  }
  location = /.well-known/caldav {
    return 301 $scheme://$host:$server_port/remote.php/dav;
  }

}
