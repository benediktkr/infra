---

- name: create dir structure
  file:
    path: "{{ item[1].root }}/{{ item[0].dir }}"
    state: directory
    mode: 0750
    owner: "{{ item[0].owner }}"
    group: "{{ item[0].group }}"
  loop_control:
    label: "{{ item[1].root }}/{{ item[0].dir }}"
  with_nested:
    - - dir: html
        owner: www-data
        group: root # changes back otherwise
      - dir: data
        owner: www-data
        group: www-data
    - "{{ nextclouds }}"

- name: template scripts
  template:
    src: "{{ item }}.j2"
    dest: /usr/local/bin/{{ item }}
    mode: 0775
    owner: root
    group: root
  with_items:
    - nextcloudversion.sh
    - nextcloud-influx.py

- name: versions to variable
  command: /usr/local/bin/nextcloudversion.sh
  register: cmdnextcloudversion
  check_mode: no  # warning: dragons
  changed_when: false

- set_fact:
    nc_versions: "{{ cmdnextcloudversion.stdout | from_json }}"
  check_mode: no

- debug:
    var:
      nc_versions

- name: template config.php
  template:
    src: config.php.j2
    dest: "{{ item.root }}/html/config/config.php"
    mode: 0750
    owner: www-data
    group: www-data
  with_items: "{{ nextclouds }}"
  loop_control:
    label: "{{ item.name }}"
  when: False  # disabled during migration

- name: redis containers
  docker_container:
    name: "redis_{{ item.name }}"
    image: "redis:latest"
    hostname: "redis_{{ item.name }}"
    auto_remove: no
    detach: yes
    pull: yes
    state: "{{ item.state | default('started') }}"
    restart_policy: "unless-stopped"
    container_default_behavior: compatibility
    env:
      REDIS_HOST: "redis_{{ item.name }}"
    networks_cli_compatible: no
    networks:
      - name: bridgewithdns
    healthcheck:
      interval: 30s
      timeout: 60s
      start_period: 10s
      test: "redis-cli --raw incr ping"
  when: item.redis
  with_items: "{{ nextclouds }}"
  loop_control:
    label: "redis_{{ item.name }} [{{ item.state }}]"
  tags:
    - nextcloud-container
    - redis
    - docker-containers

# Had to copy ssl_match_hostname from
#   /usr/local/lib/python2.7/dist-pacakges/backports
# to
#  /usr/lib/python2.7/dist-packages/backports
# after upgrading debian
- name: nextcloud containers
  docker_container:
    name: "{{ item.name }}"
    hostname: "{{ item.name }}"
    image: "nextcloud:{{ item.version }}"
    auto_remove: no
    detach: yes
    pull: yes
    state: "{{ item.state | default('started') }}"
    restart_policy: "unless-stopped"
    container_default_behavior: compatibility
    env:
      NEXTCLOUD_DATA_DIR: "/data"
    ports:
      - "127.0.0.1:{{ item.exposed_port }}:{{ item.container_port }}"
    mounts:
      - type: bind
        source: "{{ item.root }}/data"
        target: /data
      - type: bind
        source: "{{ item.root }}/html"
        target: /var/www/html

    networks_cli_compatible: no
    networks:
      - name: bridgewithdns
        ipv4_address: "{{ item.docker_ip }}"
  with_items: "{{ nextclouds }}"
  loop_control:
    label: "{{ item.name }} [{{ item.state }}]"
  tags:
    - nextcloud-container
    - docker-containers

- name: template nginx vhost
  template:
    src: nginx-site.conf.j2
    dest: /etc/nginx/sites-enabled/01-nextcloud
  tags:
    - nginx
    - nextcloud-nginx
  notify: reload nginx

- name: template cron file
  template:
    src: nextcloud-cron.j2
    dest: /etc/cron.d/nextcloud
  tags: cron

- name: wait for nextclouds
  wait_for:
    port: "{{ item.container_port }}"
    host: "{{ item.docker_ip }}"
    sleep: 2
  when: item.docker_ip is defined and item.state == "started"
  with_items: "{{ nextclouds }}"
  loop_control:
    label: "{{ item.name }}"
  tags:
    - docker

- name: template filebeat config
  template:
    src: filebeat-nextcloud.yml.j2
    dest: "/etc/filebeat/inputs.d/nextcloud.yml"
    owner: root
    group: root
    mode: 0600
  tags:
    - filebeat
  notify: restart filebeat
