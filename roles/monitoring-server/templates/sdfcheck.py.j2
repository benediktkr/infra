#!/usr/bin/env python3

from datetime import datetime, timezone

import requests

import sudoisinflux


SDF_URL = "{{ sdf_metaarray_url }}"  # without trailing /

def check():
    r = requests.get(SDF_URL + "/stat.json")
    r.raise_for_status()
    j = r.json()

    now = datetime.now(tz=timezone.utc)
    dt_backup_updated = datetime.fromisoformat(j['backup_updated'])
    dt_metric_updated = datetime.fromisoformat(j['metric_updated'])

    assert now.tzname() == "UTC"
    assert dt_backup_updated.tzname() == "UTC"
    assert dt_metric_updated.tzname() == "UTC"

    backup_age = now - dt_backup_updated
    metric_age = now - dt_metric_updated
    metric_age_mins = metric_age.total_seconds() // 60


    datapoints = [{
        "measurement": "sdfbackup",
        "tags": {
            "name": j['backup_name']
        },
        "time": now.isoformat(),
        "fields": {
            "age_days": int(backup_age.days),
            "age_seconds": int(backup_age.total_seconds()),
            "backup_size": int(j['backup_size']),
            "value": dt_backup_updated.isoformat()
        }
    },
    {
        "measurement": "sdfbackup_metric",
        "tags": {
            "name": j['backup_name']
        },
        "time": now.isoformat(),
        "fields": {
            "age_mins": int(metric_age_mins),
            "age_seconds": int(metric_age.total_seconds()),
            "metric_updated": dt_metric_updated.isoformat()
        }
    }]

    sudoisinflux.write(datapoints, precision='h')


if __name__ == "__main__":
    check()
